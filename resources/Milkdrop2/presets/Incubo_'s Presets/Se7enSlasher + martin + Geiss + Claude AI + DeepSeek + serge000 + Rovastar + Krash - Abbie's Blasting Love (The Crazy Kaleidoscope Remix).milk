MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=3
[preset00]
fRating=3.000
fGammaAdj=2.000
fDecay=0.925
fVideoEchoZoom=1.007
fVideoEchoAlpha=0.000
nVideoEchoOrientation=3
nWaveMode=7
bAdditiveWaves=1
bWaveDots=0
bWaveThick=0
bModWaveAlphaByVolume=1
bMaximizeWaveColor=0
bTexWrap=0
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=0
bSolarize=0
bInvert=0
fWaveAlpha=0.000
fWaveScale=1.286
fWaveSmoothing=0.630
fWaveParam=0.000
fModWaveAlphaStart=0.710
fModWaveAlphaEnd=1.300
fWarpAnimSpeed=1.000
fWarpScale=1.331
fZoomExponent=1.00000
fShader=0.000
zoom=0.99951
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=1.00000
sy=1.00000
wave_r=0.650
wave_g=0.650
wave_b=0.650
wave_x=0.500
wave_y=0.500
ob_size=0.500
ob_r=0.010
ob_g=0.000
ob_b=0.000
ob_a=0.000
ib_size=0.260
ib_r=0.250
ib_g=0.250
ib_b=0.250
ib_a=0.000
nMotionVectorsX=12.000
nMotionVectorsY=9.000
mv_dx=0.000
mv_dy=0.000
mv_l=0.900
mv_r=1.000
mv_g=1.000
mv_b=1.000
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.250
wavecode_0_enabled=0
wavecode_0_samples=512
wavecode_0_sep=0
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=0
wavecode_0_bDrawThick=0
wavecode_0_bAdditive=0
wavecode_0_scaling=1.00000
wavecode_0_smoothing=0.50000
wavecode_0_r=1.000
wavecode_0_g=1.000
wavecode_0_b=1.000
wavecode_0_a=1.000
wavecode_1_enabled=0
wavecode_1_samples=512
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=0
wavecode_1_bDrawThick=0
wavecode_1_bAdditive=0
wavecode_1_scaling=1.00000
wavecode_1_smoothing=0.50000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=1.000
wavecode_2_enabled=0
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=0
wavecode_2_bAdditive=0
wavecode_2_scaling=1.00000
wavecode_2_smoothing=0.50000
wavecode_2_r=1.000
wavecode_2_g=1.000
wavecode_2_b=1.000
wavecode_2_a=1.000
wavecode_3_enabled=0
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=0
wavecode_3_bUseDots=0
wavecode_3_bDrawThick=0
wavecode_3_bAdditive=0
wavecode_3_scaling=1.00000
wavecode_3_smoothing=0.50000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=1.000
shapecode_0_enabled=0
shapecode_0_sides=4
shapecode_0_additive=0
shapecode_0_thickOutline=0
shapecode_0_textured=0
shapecode_0_num_inst=1
shapecode_0_x=0.500
shapecode_0_y=0.500
shapecode_0_rad=0.10000
shapecode_0_ang=0.00000
shapecode_0_tex_ang=0.00000
shapecode_0_tex_zoom=1.00000
shapecode_0_r=1.000
shapecode_0_g=0.000
shapecode_0_b=0.000
shapecode_0_a=1.000
shapecode_0_r2=0.000
shapecode_0_g2=1.000
shapecode_0_b2=0.000
shapecode_0_a2=0.000
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=1.000
shapecode_0_border_a=0.100
shapecode_1_enabled=0
shapecode_1_sides=4
shapecode_1_additive=0
shapecode_1_thickOutline=0
shapecode_1_textured=0
shapecode_1_num_inst=1
shapecode_1_x=0.500
shapecode_1_y=0.500
shapecode_1_rad=0.10000
shapecode_1_ang=0.00000
shapecode_1_tex_ang=0.00000
shapecode_1_tex_zoom=1.00000
shapecode_1_r=1.000
shapecode_1_g=0.000
shapecode_1_b=0.000
shapecode_1_a=1.000
shapecode_1_r2=0.000
shapecode_1_g2=1.000
shapecode_1_b2=0.000
shapecode_1_a2=0.000
shapecode_1_border_r=1.000
shapecode_1_border_g=1.000
shapecode_1_border_b=1.000
shapecode_1_border_a=0.100
shapecode_2_enabled=0
shapecode_2_sides=4
shapecode_2_additive=0
shapecode_2_thickOutline=0
shapecode_2_textured=0
shapecode_2_num_inst=1
shapecode_2_x=0.500
shapecode_2_y=0.500
shapecode_2_rad=0.10000
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=1.00000
shapecode_2_r=1.000
shapecode_2_g=0.000
shapecode_2_b=0.000
shapecode_2_a=1.000
shapecode_2_r2=0.000
shapecode_2_g2=1.000
shapecode_2_b2=0.000
shapecode_2_a2=0.000
shapecode_2_border_r=1.000
shapecode_2_border_g=1.000
shapecode_2_border_b=1.000
shapecode_2_border_a=0.100
shapecode_3_enabled=0
shapecode_3_sides=4
shapecode_3_additive=0
shapecode_3_thickOutline=0
shapecode_3_textured=0
shapecode_3_num_inst=1
shapecode_3_x=0.500
shapecode_3_y=0.500
shapecode_3_rad=0.10000
shapecode_3_ang=0.00000
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=1.00000
shapecode_3_r=1.000
shapecode_3_g=0.000
shapecode_3_b=0.000
shapecode_3_a=1.000
shapecode_3_r2=0.000
shapecode_3_g2=1.000
shapecode_3_b2=0.000
shapecode_3_a2=0.000
shapecode_3_border_r=1.000
shapecode_3_border_g=1.000
shapecode_3_border_b=1.000
shapecode_3_border_a=0.100
per_frame_init_1=i=0; loop (5000,i[0]=0; gmem[i]=0; i+=1;);
per_frame_init_2=octaves=3; minbpm=75; maxbpm=200; nres_oct=60; 
per_frame_init_3=nres_extra=nres_oct/log(2)*log(maxbpm/minbpm/2);
per_frame_init_4=nres=nres_oct*octaves+nres_extra;
per_frame_init_5=bstep = log(2)/nres_oct;
per_frame_init_6=nres_out = ceil(nres_oct+nres_extra); //int is necessary !
per_frame_init_7=
per_frame_init_8=maxind = 40;
per_frame_init_9=i=0;
per_frame_init_10=loop (nres,
per_frame_init_11= //precalculate BPM
per_frame_init_12=  (8*i)[3]=minbpm*exp(i*bstep); 
per_frame_init_13= //precalculate weighting
per_frame_init_14=  if (i<=nres_out,(8*i)[4]=min(2,1+sin($pi*i/nres_out)*3)/2,0);; 
per_frame_init_15=i+=1);
per_frame_init_16=
per_frame_init_17=ripple_form = 5 + int(rand(20));
per_frame_init_18=rand_fin_kal = 4 + int(rand(4));
per_frame_1=//Martin/Nitorami - DFT based BPM identification
per_frame_2=//If you need a good BPM detection, why don't you simply use my code ? - Nitorami
per_frame_3=//Credits in comp shader code. Don't blame me.
per_frame_4=
per_frame_5=dt=1/fps; 
per_frame_6=tcorr = (dt - dt_); //to compensate timing errors caused by MD's time smoothing
per_frame_7=dt_= dt;
per_frame_8=treal += dt + tcorr*38; //I-share of timing error comp.
per_frame_9=exc=2*bass+mid+treb;  //choose what you like but mind this could affect quali
per_frame_10=d0= exp(-1.5*dt);
per_frame_11=i=0; avg = 0;
per_frame_12=loop (nres,
per_frame_13=  n = 8*i;
per_frame_14=  w = 2*$pi/60*n[3];
per_frame_15=  d = 1-dt*w*0.013; //DFT smoothing optimised for nres_oct=60
per_frame_16=  arg = treal*w + tcorr*15000; //P-share of timing error comp.
per_frame_17=  n[1] = n[1]*d +exc*cos(arg)*(1-d); //DFT real part
per_frame_18=  n[2] = n[2]*d +exc*sin(arg)*(1-d); //DFT imaginary part
per_frame_19=  if (i<nres_out, 
per_frame_20=    n2 = 8*(i+nres_oct);
per_frame_21=    n4 = 8*(i+nres_oct*2);
per_frame_22=    sum = sqrt (sqr(n[1])+sqr(n[2]) + sqr(n2[1])+sqr(n2[2]) + sqr(n4[1])+sqr(n4[2]));
per_frame_23=    avg += sum;
per_frame_24=    n[0]= n[0]*d0+sum*(1-d0)*n[4];
per_frame_25=    if (n[0]>(8*promax)[0], promax=max(2,min(nres_out-2,i));,0); 
per_frame_26=  ,0);
per_frame_27=i += 1;);
per_frame_28=avg_ = avg_*d0 + (1-d0)*avg/nres_out;
per_frame_29=
per_frame_30=//Resist frequent BPM changes
per_frame_31=m8 = 8*maxind;
per_frame_32=wait += abs(m8[0]-(8*promax)[0])*dt*100; 
per_frame_33=if (wait>abs(promax-maxind)*80/nres_oct, maxind=promax; wait = 0,0);
per_frame_34=
per_frame_35=//OUTPUT
per_frame_36=BPM = m8[3];
per_frame_37=
per_frame_38=//Se7enSlasher - Convert BPM to integer and do a simple rounding.
per_frame_39=//intBPM = floor(BPM+.5); //More efficient way?
per_frame_40=intBPM = int(BPM);
per_frame_41=
per_frame_42=//Se7enSlasher - Timed Stop Technique
per_frame_43=
per_frame_44=//Se7enSlasher - Change the intBPM value to 0 when there is no sound.
per_frame_45=timeUntilStop = if (bass+mid+treb > 0, 2, timeUntilStop);
per_frame_46=timeUntilStop -= 1/fps;
per_frame_47=intBPM = if(timeUntilStop <= 0, 0, intBPM);
per_frame_48=
per_frame_49=linear_trans = if(!intBPM, linear_trans -= (1/fps)*3, linear_trans += (1/fps)*3);
per_frame_50=
per_frame_51=//Prevent from getting to gap (0 - 1).
per_frame_52=linear_trans = if(linear_trans < 0, 0, linear_trans);
per_frame_53=linear_trans = if(linear_trans > 1, 1, linear_trans);
per_frame_54=
per_frame_55=log_trans = log(linear_trans * 50 + 1) / 3.95;
per_frame_56=
per_frame_57=q7 = log_trans;
per_frame_58=
per_frame_59=//END
per_frame_60=
per_frame_61=q1 = intBPM;
per_frame_62=monitor = intBPM;
per_frame_63=
per_frame_64=cool_krash_rotation_movement = abs(3.14*sin(time*0.345) + 3.14*sin(time*.234));
per_frame_65=q11=(2*abs((sin(time)-0.5))-cool_krash_rotation_movement); //Used for remix, I think it's not needed, anyways.
per_frame_66=
per_frame_67=time_imgsync += (1/fps) * (intBPM/30);
per_frame_68=time_imgsync = if (time_imgsync >= 4, 0, time_imgsync);
per_frame_69=q2 = pow(10, ((bass_att+mid_att+treb)/3)-3);
per_frame_70=q3 = int(time_imgsync);
per_frame_71=
per_frame_72=q4 = 1/aspectx;
per_frame_73=q5 = 1/aspecty+.75;
per_frame_74=
per_frame_75=BPMTime = (sin(time * $PI / (60 / intBPM)) + 1) / 2;
per_frame_76=q6 = BPMTime;
per_frame_77=time_delay = if(time_delay >= .35 && bass > 2, 0, time_delay += 1/fps);
per_frame_78=ripple_form = if(time_delay == 0, 5 + int(rand(20)), ripple_form);
per_frame_79=q8 = ripple_form;
per_frame_80=q9 = rand_fin_kal;
per_frame_81=
per_frame_82=monitor = intBPM;
per_pixel_1=zoom = 1 + q2;
per_pixel_2=zoom += q2*sin(rad * q8 + time * 3.5);
warp_1=`sampler sampler_worms;
warp_2=`float3 color, mus;
warp_3=`float dx,dy;
warp_4=`shader_body {
warp_5=`
warp_6=`
warp_7=`float2 uv1 = (uv-.5) * aspect.xy;
warp_8=`
warp_9=`float2 uv6 = uv1;
warp_10=`float z = q10*24*length(((uv1.x)*(uv1.y)));
warp_11=`float2 d = normalize(uv1);
warp_12=`float2 rs = clamp(tan(z)*d,-2,2);
warp_13=`uv += .001*lum(GetBlur1(uv))*float2(0,0);
warp_14=`uv -= rs/200;
warp_15=`
warp_16=`uv6 = .4*sin(uv*5+rand_frame*8);
warp_17=`mus = .095/(length(uv6));  // sensit  orig:  .078
warp_18=`mus *= ((bass+mid)*1.75)*.34*float3(1, .575, .9);
warp_19=`
warp_20=`float3 blur = GetBlur2(frac(uv));
warp_21=`
warp_22=`float3 crisp= tex2D(sampler_main,uv);
warp_23=`
warp_24=`float3 ret1 = crisp - blur*.05 + .1*mus;
warp_25=`
warp_26=`q25 = 1;
warp_27=`ret = q25*(ret1*.99-.025) + (1-q25)* GetPixel(uv_orig);
warp_28=`
warp_29=`}
comp_1=`//Sprites are extracted using UndertaleModTool: https://github.com/UnderminersTeam/UndertaleModTool
comp_2=`//Credits: MINDWAVE by Holohammer. Play demo now: https://holohammer.com/mindwave/
comp_3=`
comp_4=`//Define textures with alternate name
comp_5=`#define AbbieDance1 sampler_fc_ibtS_spr_dance_0
comp_6=`#define AbbieDance2 sampler_fc_ibtS_spr_dance_1
comp_7=`#define AbbieDance3 sampler_fc_ibtS_spr_dance_2
comp_8=`#define AbbieDance4 sampler_fc_ibtS_spr_dance_3
comp_9=`
comp_10=`sampler AbbieDance1;
comp_11=`float4 texsize_ibtS_spr_dance_0;
comp_12=`sampler AbbieDance2;
comp_13=`float4 texsize_ibtS_spr_dance_1;
comp_14=`sampler AbbieDance3;
comp_15=`float4 texsize_ibtS_spr_dance_2;
comp_16=`sampler AbbieDance4;
comp_17=`float4 texsize_ibtS_spr_dance_3;
comp_18=`
comp_19=`float2 uv_scaled;
comp_20=`float2 uv_out;
comp_21=`
comp_22=`// Deepseek - Universal edge fading function
comp_23=`// Modified EdgeFade function - fades top, left, and right edges only
comp_24=`float EdgeFade(float2 uva, float margin)
comp_25=`{
comp_26=`    margin = max(margin, 0.05); // Minimum margin to prevent artifacts - Tweaked a little bit.
comp_27=`    // Fade left/right edges
comp_28=`    float fadeX = smoothstep(0.0, margin, uva.x) * smoothstep(1.0, 1.0 - margin, uva.x);
comp_29=`    // Fade ONLY top edge (removed bottom edge fade)
comp_30=`    float fadeY = smoothstep(0.0, margin, uva.y);
comp_31=`    return fadeX * fadeY;
comp_32=`}
comp_33=`
comp_34=`shader_body
comp_35=`{
comp_36=`//DeepSeek
comp_37=`float zoomFactor = 1.0 + bass_att * 0.035; // Adjust the multiplier to control the zoom intensity, tweaked by me
comp_38=`uv = float2(0.5, 0.5) + (uv_orig - float2(0.5, 0.5)) / zoomFactor;
comp_39=`
comp_40=`//ROVASTAR's Kaleidoscope Code, mashed up with Krash's movement code.
comp_41=`
comp_42=`    float rad_lq = rad * length(texsize.xy)*0.5;
comp_43=`    float ang_lq = ang;
comp_44=`    float2 uv_temp1 = (uv - 0.5) * texsize.xy;
comp_45=`    float rad_hq = length(uv_temp1);
comp_46=`    float ang_hq = atan2(-uv_temp1.y, uv_temp1.x);
comp_47=`
comp_48=`    float2 uv_kal = (uv - 0.5);
comp_49=`    float rad2 = rad_hq*0.8;
comp_50=`    float ang2 = ang_hq * M_INV_PI_2;
comp_51=`
comp_52=`        // ROTATION OVER TIME
comp_53=`        #if 1
comp_54=`          ang2 -= q11/7.5;   //rotate over time
comp_55=`        #endif
comp_56=`
comp_57=`        // FIN TYPE
comp_58=`        //float fins = 1 + floor(rand_preset.z*5.95);
comp_59=`        float fins = q9 + floor(rand_preset.z*2.95);
comp_60=`              
comp_61=`        #if 1     // SHARP FINS
comp_62=`          ang2 = frac(ang2*fins)/fins;
comp_63=`              // ENABLE THIS TO MAKE THE FINS ALTERNATE: (seamless!)
comp_64=`              ang2 = abs(ang2 - 0.5/fins);
comp_65=`        #else     // COSINE FINS - a bit slow
comp_66=`          ang2 = cos(ang2*M_PI_2*fins) * 0.023;
comp_67=`        #endif
comp_68=`
comp_69=`        // RADIAL KALEIDOSCOPING?
comp_70=`        #if 0
comp_71=`          rad2 *= g_fTexSize.z;
comp_72=`            // choose one:
comp_73=`            //rad2 = lerp(rad2, frac(rad2*3)/3.0, 0.6);
comp_74=`            rad2 = cos(rad2*5);
comp_75=`            //rad2 = sqrt(rad2)*0.5;
comp_76=`            //rad2 += abs(frac(rad2*7)-0.5)/7.0 * 1.15;  // stepifier
comp_77=`            //rad2 += cos(rad2*61)*0.02;
comp_78=`          rad2 *= g_fTexSize.x;
comp_79=`        #endif
comp_80=`
comp_81=`    ang2 *= M_PI_2;
comp_82=`    uv_out = 0.25 + rad2*float2(cos(ang2),sin(ang2))*texsize.zw;
comp_83=`    uv_out.y = 1.1-uv_out.y;
comp_84=`
comp_85=`    ret = tex2D(sampler_main, uv_out).xyz;
comp_86=`
comp_87=`    float2 reference_size = float2(1920, 1080)*14.275; // Fixed reference size (popular resolution is 1920x1080) and patched the aprox. 1080px image resolution by multiplying.
comp_88=`
comp_89=`    if (q3 == 0)
comp_90=`    {
comp_91=`       uv_scaled = float2(uv_out.x-.5,uv_out.y-1)/5.35 * reference_size * texsize_ibtS_spr_dance_0.zw + float2 (0.5, q7);
comp_92=`       uv_scaled += float2(.1925, 0); //Position fix
comp_93=`       uv_scaled *= (uv_scaled.x>0) * (uv_scaled.y>0) * (uv_scaled.x<1) * (uv_scaled.y<1);
comp_94=`       uv_scaled = clamp(uv_scaled, 0.0, 1.0); // Proper UV clamping
comp_95=`       float edgeFade = EdgeFade(uv_scaled, 0.01); // 1% margin fading
comp_96=`
comp_97=`       //Se7enSlasher - Using my black background removal technique because it doesn't support transparency on any image files on MilkDrop. So I have implemented instead.
comp_98=`       float AbbieDance1_Lum = lum(tex2D(AbbieDance1, uv_scaled) * edgeFade);
comp_99=`
comp_100=`       if (AbbieDance1_Lum > .2)
comp_101=`       { ret = tex2D(AbbieDance1, uv_scaled);  }
comp_102=`    }
comp_103=`
comp_104=`    if (q3 == 1)
comp_105=`    {
comp_106=`       uv_scaled = float2(uv_out.x-.5,uv_out.y-1)/5.35 * reference_size * texsize_ibtS_spr_dance_1.zw + float2 (0.5, q7);
comp_107=`       uv_scaled += float2(.245, 0); //Position fix
comp_108=`       uv_scaled *= (uv_scaled.x>0) * (uv_scaled.y>0) * (uv_scaled.x<1) * (uv_scaled.y<1);
comp_109=`       uv_scaled = clamp(uv_scaled, 0.0, 1.0); // Proper UV clamping
comp_110=`       float edgeFade = EdgeFade(uv_scaled, 0.01); // 1% margin fading
comp_111=`
comp_112=`       float AbbieDance2_Lum = lum(tex2D(AbbieDance2, uv_scaled) * edgeFade);
comp_113=`
comp_114=`       if (AbbieDance2_Lum > .2)
comp_115=`       { ret = tex2D(AbbieDance2, uv_scaled);  }
comp_116=`    }
comp_117=`
comp_118=`    if (q3 == 2)
comp_119=`    {
comp_120=`       uv_scaled = float2(uv_out.x-.5,uv_out.y-1)/5.35 * reference_size * texsize_ibtS_spr_dance_2.zw + float2 (0.5, q7);
comp_121=`       uv_scaled += float2(-.19325, 0); //Position fix
comp_122=`       uv_scaled *= (uv_scaled.x>0) * (uv_scaled.y>0) * (uv_scaled.x<1) * (uv_scaled.y<1);
comp_123=`       uv_scaled = clamp(uv_scaled, 0.0, 1.0); // Proper UV clamping
comp_124=`       float edgeFade = EdgeFade(uv_scaled, 0.01); // 1% margin fading
comp_125=`
comp_126=`       float AbbieDance3_Lum = lum(tex2D(AbbieDance3, uv_scaled) * edgeFade);
comp_127=`
comp_128=`       if (AbbieDance3_Lum > .2)
comp_129=`       { ret = tex2D(AbbieDance3, uv_scaled);  }
comp_130=`    }
comp_131=`
comp_132=`    if (q3 == 3)
comp_133=`    {
comp_134=`       uv_scaled = float2(uv_out.x-.5,uv_out.y-1)/5.35 * reference_size * texsize_ibtS_spr_dance_3.zw + float2 (0.5, q7);
comp_135=`       uv_scaled += float2(-.26, 0); //Position fix
comp_136=`       uv_scaled *= (uv_scaled.x>0) * (uv_scaled.y>0) * (uv_scaled.x<1) * (uv_scaled.y<1);
comp_137=`       uv_scaled = clamp(uv_scaled, 0.0, 1.0); // Proper UV clamping
comp_138=`       float edgeFade = EdgeFade(uv_scaled, 0.01); // 1% margin fading
comp_139=`
comp_140=`       float AbbieDance4_Lum = lum(tex2D(AbbieDance4, uv_scaled) * edgeFade);
comp_141=`
comp_142=`       if (AbbieDance4_Lum > .2)
comp_143=`       { ret = tex2D(AbbieDance4, uv_scaled);  }
comp_144=`    }
comp_145=`
comp_146=`      //Claude AI's Heart Code
comp_147=`    // Heart shape using standard mathematical formula
comp_148=`  float2 uv2 = uv - 0.5;
comp_149=`  uv2.x *= texsize.x/texsize.y;  // correct aspect ratio
comp_150=`  
comp_151=`  // Scale and flip the coordinates
comp_152=`  uv2.y = -uv2.y;
comp_153=`  uv2 *= 2.5;
comp_154=`  
comp_155=`  // Standard heart formula
comp_156=`  float2 q = float2(uv2.x, uv2.y - sqrt(abs(uv2.x))*0.5) + float2 (0, .125);
comp_157=`  float d = length(q) - 0.5 + 0.15*(-q6*2);
comp_158=`  
comp_159=`  // Create a soft glow effect
comp_160=`  float glow = 0.05/abs(d);
comp_161=`  glow = saturate(glow);
comp_162=`  
comp_163=`  // Add the heart with color
comp_164=`  float3 heartColor = float3(0.8, 0.1, 0.3);  // red heart
comp_165=`  heartColor *= 1.0 + .5*q6;  // pulsing effect
comp_166=`  
comp_167=`  // Combine everything
comp_168=`  float3 uv_heart = glow * heartColor*3; //Declare a new heart composition layer.
comp_169=`  //ret = uv_out;
comp_170=`  ret += uv_heart * q7;
comp_171=`
comp_172=`}
