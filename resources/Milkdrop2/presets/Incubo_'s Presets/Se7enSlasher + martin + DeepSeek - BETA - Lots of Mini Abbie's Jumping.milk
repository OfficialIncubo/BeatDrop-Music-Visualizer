MILKDROP_PRESET_VERSION=201
PSVERSION=4
PSVERSION_WARP=4
PSVERSION_COMP=4
[preset00]
fRating=3.000
fGammaAdj=2.000
fDecay=0.925
fVideoEchoZoom=1.007
fVideoEchoAlpha=0.000
nVideoEchoOrientation=3
nWaveMode=7
bAdditiveWaves=1
bWaveDots=0
bWaveThick=0
bModWaveAlphaByVolume=1
bMaximizeWaveColor=0
bTexWrap=0
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=0
bSolarize=0
bInvert=0
fWaveAlpha=4.100
fWaveScale=1.286
fWaveSmoothing=0.630
fWaveParam=0.000
fModWaveAlphaStart=0.710
fModWaveAlphaEnd=1.300
fWarpAnimSpeed=0.909
fWarpScale=1.331
fZoomExponent=1.00000
fShader=0.000
zoom=0.99951
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=1.00000
sy=1.00000
wave_r=0.650
wave_g=0.650
wave_b=0.650
wave_x=0.500
wave_y=0.500
ob_size=0.500
ob_r=0.010
ob_g=0.000
ob_b=0.000
ob_a=0.000
ib_size=0.260
ib_r=0.250
ib_g=0.250
ib_b=0.250
ib_a=0.000
nMotionVectorsX=12.000
nMotionVectorsY=9.000
mv_dx=0.000
mv_dy=0.000
mv_l=0.900
mv_r=1.000
mv_g=1.000
mv_b=1.000
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.250
shapecode_0_enabled=1
shapecode_0_sides=4
shapecode_0_additive=0
shapecode_0_thickOutline=0
shapecode_0_textured=0
shapecode_0_num_inst=2
shapecode_0_x=0.500
shapecode_0_y=0.500
shapecode_0_rad=0.35034
shapecode_0_ang=0.00000
shapecode_0_tex_ang=0.00000
shapecode_0_tex_zoom=1.00000
shapecode_0_r=1.000
shapecode_0_g=1.000
shapecode_0_b=1.000
shapecode_0_a=1.000
shapecode_0_r2=1.000
shapecode_0_g2=1.000
shapecode_0_b2=1.000
shapecode_0_a2=1.000
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=1.000
shapecode_0_border_a=1.000
shape_0_per_frame1=x = instance/2.5+.3;
shape_0_per_frame2=a = 1;
shape_0_per_frame3=y = if(instance == 0, (q31/15)+.5, (q32/15)+.5);
per_frame_init_1=i=0; loop (5000,i[0]=0; gmem[i]=0; i+=1;);
per_frame_init_2=octaves=3; minbpm=75; maxbpm=200; nres_oct=60; 
per_frame_init_3=nres_extra=nres_oct/log(2)*log(maxbpm/minbpm/2);
per_frame_init_4=nres=nres_oct*octaves+nres_extra;
per_frame_init_5=bstep = log(2)/nres_oct;
per_frame_init_6=nres_out = ceil(nres_oct+nres_extra); //int is necessary !
per_frame_init_7=
per_frame_init_8=maxind = 40;
per_frame_init_9=i=0;
per_frame_init_10=loop (nres,
per_frame_init_11= //precalculate BPM
per_frame_init_12=  (8*i)[3]=minbpm*exp(i*bstep); 
per_frame_init_13= //precalculate weighting
per_frame_init_14=  if (i<=nres_out,(8*i)[4]=min(2,1+sin($pi*i/nres_out)*3)/2,0);; 
per_frame_init_15=i+=1);
per_frame_init_16=
per_frame_init_17=img_spacing = .3;
per_frame_init_18=img_scale = .35;
per_frame_init_19=BPMScrollTime = 0;
per_frame_init_20=
per_frame_init_21=rand1_neg = int(rand(2));
per_frame_init_22=rand2_neg = int(rand(2));
per_frame_init_23=rand3_neg = int(rand(2));
per_frame_init_24=rand4_neg = int(rand(2));
per_frame_init_25=rand5_neg = int(rand(2));
per_frame_init_26=
per_frame_init_27=rand1 = if(rand1_neg, rand(1)/5, -(rand(1)/2.5));
per_frame_init_28=rand2 = if(rand2_neg, rand(1)/5, -(rand(1)/2.5));
per_frame_init_29=rand3 = if(rand3_neg, rand(1)/5, -(rand(1)/2.5));
per_frame_init_30=rand4 = if(rand4_neg, rand(1)/5, -(rand(1)/2.5));
per_frame_init_31=rand5 = if(rand5_neg, rand(1)/5, -(rand(1)/2.5));
per_frame_1=//martin/Nitorami - DFT based BPM identification
per_frame_2=
per_frame_3=dt=1/fps; 
per_frame_4=tcorr = (dt - dt_); //to compensate timing errors caused by MD's time smoothing
per_frame_5=dt_= dt;
per_frame_6=treal += dt + tcorr*38; //I-share of timing error comp.
per_frame_7=exc=2*bass+mid+treb;  //choose what you like but mind this could affect quali
per_frame_8=d0= exp(-1.5*dt);
per_frame_9=i=0; avg = 0;
per_frame_10=loop (nres,
per_frame_11=  n = 8*i;
per_frame_12=  w = 2*$pi/60*n[3];
per_frame_13=  d = 1-dt*w*0.013; //DFT smoothing optimised for nres_oct=60
per_frame_14=  arg = treal*w + tcorr*15000; //P-share of timing error comp.
per_frame_15=  n[1] = n[1]*d +exc*cos(arg)*(1-d); //DFT real part
per_frame_16=  n[2] = n[2]*d +exc*sin(arg)*(1-d); //DFT imaginary part
per_frame_17=  if (i<nres_out, 
per_frame_18=    n2 = 8*(i+nres_oct);
per_frame_19=    n4 = 8*(i+nres_oct*2);
per_frame_20=    sum = sqrt (sqr(n[1])+sqr(n[2]) + sqr(n2[1])+sqr(n2[2]) + sqr(n4[1])+sqr(n4[2]));
per_frame_21=    avg += sum;
per_frame_22=    n[0]= n[0]*d0+sum*(1-d0)*n[4];
per_frame_23=    if (n[0]>(8*promax)[0], promax=max(2,min(nres_out-2,i));,0); 
per_frame_24=  ,0);
per_frame_25=i += 1;);
per_frame_26=avg_ = avg_*d0 + (1-d0)*avg/nres_out;
per_frame_27=
per_frame_28=//Resist frequent BPM changes
per_frame_29=m8 = 8*maxind;
per_frame_30=wait += abs(m8[0]-(8*promax)[0])*dt*100; 
per_frame_31=if (wait>abs(promax-maxind)*80/nres_oct, maxind=promax; wait = 0,0);
per_frame_32=
per_frame_33=//OUTPUT
per_frame_34=BPM = m8[3];
per_frame_35=
per_frame_36=//Se7enSlasher - Convert BPM to integer and do a simple rounding.
per_frame_37=//intBPM = floor(BPM+.5); //More efficient way?
per_frame_38=intBPM = int(BPM);
per_frame_39=//Not needed, this time because it fixes the off-beat issue, like martin (Nitorami) proposed.
per_frame_40=
per_frame_41=q1 = intBPM;
per_frame_42=monitor = q1;
per_frame_43=
per_frame_44=time_sync += ((1/fps) * (q1/30))/2;
per_frame_45=time_sync = if (time_sync >= 2, 0, time_sync);
per_frame_46=
per_frame_47=//martin (Nitorami)
per_frame_48=t1 += q1/60*$PI*dt;
per_frame_49=
per_frame_50=bpmMod = if(time_sync >= 0 && time_sync <= 1, 0, 1);
per_frame_51=
per_frame_52=//martin (Nitorami)
per_frame_53=jump1 = max(0, sin(t1));
per_frame_54=jump2 = max(0, sin(t1+$PI));
per_frame_55=
per_frame_56=jump1 = if(timeUntilStop <= 0, 0, jump1);
per_frame_57=jump2 = if(timeUntilStop <= 0, 0, jump2);
per_frame_58=
per_frame_59=//Se7enSlasher - Timed Stop Technique
per_frame_60=//Change the t1 value to 0 when there is no sound.
per_frame_61=timeUntilStop = if (bass+mid+treb > 0, .5, timeUntilStop);
per_frame_62=timeUntilStop -= 1/fps;
per_frame_63=t1 = if(timeUntilStop <= 0, 0, t1);
per_frame_64=q1 = if(timeUntilStop <= 0, 0, q1);
per_frame_65=
per_frame_66=q31 = jump1;
per_frame_67=q32 = jump2;
per_frame_68=
per_frame_69=monitor = t1;
per_frame_70=
per_frame_71=wave_a = 0;
per_frame_72=decay = 0;
per_frame_73=
per_frame_74=q2 = img_inst;
per_frame_75=q3 = img_scale;
per_frame_76=q4 = img_spacing;
per_frame_77=
per_frame_78=BPMScrollTime += smooth_BPM*.000015;
per_frame_79=q5 = BPMScrollTime;
per_frame_80=
per_frame_81=q6 = rand1;
per_frame_82=q7 = rand2;
per_frame_83=q8 = rand3;
per_frame_84=q9 = rand4;
per_frame_85=q10 = rand5;
per_frame_86=
per_frame_87=dec = .75/fps;
per_frame_88=smooth_BPM = smooth_BPM * (1-dec) + q1 * dec;
per_frame_89=
per_frame_90=monitor = smooth_BPM;
warp_1=`shader_body
warp_2=`{
warp_3=`}
comp_1=`//Sprites are extracted using UndertaleModTool: https://github.com/UnderminersTeam/UndertaleModTool
comp_2=`//Credits: MINDWAVE by Holohammer. Play demo now: https://holohammer.com/mindwave/
comp_3=`
comp_4=`/*
comp_5=`Not optimized for 1:1 and portrait aspect ratios.
comp_6=`TODO: Make positions and scaling also aspect-corrected.
comp_7=`*/
comp_8=`
comp_9=`//Define textures with alternate name
comp_10=`#define Abbie_Normal sampler_ibtSw4_spr_jump0
comp_11=`#define Abbie_YAY sampler_ibtSw4_spr_jump1
comp_12=`#define texsize_Abbie_Normal texsize_ibtSw4_spr_jump0
comp_13=`#define texsize_Abbie_YAY texsize_ibtSw4_spr_jump1
comp_14=`
comp_15=`sampler Abbie_Normal;
comp_16=`sampler Abbie_YAY;
comp_17=`
comp_18=`float2 uv_scaled;
comp_19=`
comp_20=`shader_body
comp_21=`{
comp_22=`    //Aspect Correction using texsize
comp_23=`    float2 aspect = float2(1, texsize.y/texsize.x);
comp_24=`    float2 uv_aspect = (uv-.5) * aspect + .5;
comp_25=`    uv = uv_aspect;
comp_26=`
comp_27=`    ret = tex2D(sampler_main, uv).xyz;
comp_28=`
comp_29=`    //Background    
comp_30=`    ret = float3(0.8627, 0.6157, 0.9922);
comp_31=`
comp_32=`    //DeepSeek
comp_33=`    float scale = q3;
comp_34=`    int inst = 10;
comp_35=`    float spacing = q4;
comp_36=`    float scroll_speed = q5;
comp_37=`
comp_38=`    float total_width = inst * spacing;
comp_39=`    float scroll_offset = frac(scroll_speed) * spacing * inst;
comp_40=`    float start_x = -((inst-1) * spacing)/2.0 - scroll_offset;
comp_41=`
comp_42=`    for (int i = 0; i < inst; i++)
comp_43=`    {
comp_44=`        float2 instance_pos = float2(start_x + i * spacing, 0);
comp_45=`
comp_46=`        //Out of Bounds prevention
comp_47=`        if (instance_pos.x < -1.0) instance_pos.x += total_width;
comp_48=`        if (instance_pos.x > 1.0) instance_pos.x -= total_width;
comp_49=`
comp_50=`        float2 uv_scaled1 = (uv - 0.5 - instance_pos) / scale + 0.5 + float2(q6,.5 + q31/5);
comp_51=`        float2 uv_scaled2 = (uv - 0.5 - instance_pos) / scale + 0.5 + float2(q7,.25 + q32/5);
comp_52=`        float2 uv_scaled3 = (uv - 0.5 - instance_pos) / scale + 0.5 + float2(q8,0 + q31/5);
comp_53=`        float2 uv_scaled4 = (uv - 0.5 - instance_pos) / scale + 0.5 + float2(q9,-.25 + q32/5);
comp_54=`        float2 uv_scaled5 = (uv - 0.5 - instance_pos) / scale + 0.5 + float2(q10,-.5 + q31/5);        
comp_55=`
comp_56=`        if (all(uv_scaled1 >= 0.0) && all(uv_scaled1 <= 1.0))
comp_57=`        {
comp_58=`            float Abbie_Normal_Lum = lum(tex2D(Abbie_Normal, uv_scaled1).xyz);
comp_59=`            float Abbie_YAY_Lum = lum(tex2D(Abbie_YAY, uv_scaled1).xyz);
comp_60=`            if (!q31)
comp_61=`            {
comp_62=`               if (Abbie_Normal_Lum > .25)
comp_63=`                  ret = tex2D(Abbie_Normal, uv_scaled1).xyz;
comp_64=`            }
comp_65=`            else
comp_66=`            {
comp_67=`               if (Abbie_YAY_Lum > .25)
comp_68=`                  ret = tex2D(Abbie_YAY, uv_scaled1).xyz;
comp_69=`            }
comp_70=`        }
comp_71=`
comp_72=`        if (all(uv_scaled2 >= 0.0) && all(uv_scaled2 <= 1.0))
comp_73=`        {
comp_74=`            float Abbie_Normal_Lum = lum(tex2D(Abbie_Normal, uv_scaled2).xyz);
comp_75=`            float Abbie_YAY_Lum = lum(tex2D(Abbie_YAY, uv_scaled2).xyz);
comp_76=`            if (!q32)
comp_77=`            {
comp_78=`               if (Abbie_Normal_Lum > .25)
comp_79=`                  ret = tex2D(Abbie_Normal, uv_scaled2).xyz;
comp_80=`            }
comp_81=`            else
comp_82=`            {
comp_83=`               if (Abbie_YAY_Lum > .25)
comp_84=`                  ret = tex2D(Abbie_YAY, uv_scaled2).xyz;
comp_85=`            }
comp_86=`        }
comp_87=`
comp_88=`        if (all(uv_scaled3 >= 0.0) && all(uv_scaled3 <= 1.0))
comp_89=`        {
comp_90=`            float Abbie_Normal_Lum = lum(tex2D(Abbie_Normal, uv_scaled3).xyz);
comp_91=`            float Abbie_YAY_Lum = lum(tex2D(Abbie_YAY, uv_scaled3).xyz);
comp_92=`            if (!q31)
comp_93=`            {
comp_94=`               if (Abbie_Normal_Lum > .25)
comp_95=`                  ret = tex2D(Abbie_Normal, uv_scaled3).xyz;
comp_96=`            }
comp_97=`            else
comp_98=`            {
comp_99=`               if (Abbie_YAY_Lum > .25)
comp_100=`                  ret = tex2D(Abbie_YAY, uv_scaled3).xyz;
comp_101=`            }
comp_102=`        }
comp_103=`
comp_104=`        if (all(uv_scaled4 >= 0.0) && all(uv_scaled4 <= 1.0))
comp_105=`        {
comp_106=`            float Abbie_Normal_Lum = lum(tex2D(Abbie_Normal, uv_scaled4).xyz);
comp_107=`            float Abbie_YAY_Lum = lum(tex2D(Abbie_YAY, uv_scaled4).xyz);
comp_108=`            if (!q32)
comp_109=`            {
comp_110=`               if (Abbie_Normal_Lum > .25)
comp_111=`                  ret = tex2D(Abbie_Normal, uv_scaled4).xyz;
comp_112=`            }
comp_113=`            else
comp_114=`            {
comp_115=`               if (Abbie_YAY_Lum > .25)
comp_116=`                  ret = tex2D(Abbie_YAY, uv_scaled4).xyz;
comp_117=`            }
comp_118=`        }
comp_119=`
comp_120=`        if (all(uv_scaled5 >= 0.0) && all(uv_scaled5 <= 1.0))
comp_121=`        {
comp_122=`            float Abbie_Normal_Lum = lum(tex2D(Abbie_Normal, uv_scaled5).xyz);
comp_123=`            float Abbie_YAY_Lum = lum(tex2D(Abbie_YAY, uv_scaled5).xyz);
comp_124=`            if (!q31)
comp_125=`            {
comp_126=`               if (Abbie_Normal_Lum > .25)
comp_127=`                  ret = tex2D(Abbie_Normal, uv_scaled5).xyz;
comp_128=`            }
comp_129=`            else
comp_130=`            {
comp_131=`               if (Abbie_YAY_Lum > .25)
comp_132=`                  ret = tex2D(Abbie_YAY, uv_scaled5).xyz;
comp_133=`            }
comp_134=`        }
comp_135=`    }
comp_136=`}
