MILKDROP_PRESET_VERSION=201
PSVERSION=4
PSVERSION_WARP=4
PSVERSION_COMP=4
[preset00]
fRating=1.000
fGammaAdj=1.980
fDecay=0.500
fVideoEchoZoom=1.000
fVideoEchoAlpha=0.500
nVideoEchoOrientation=3
nWaveMode=0
bAdditiveWaves=1
bWaveDots=0
bWaveThick=1
bModWaveAlphaByVolume=1
bMaximizeWaveColor=1
bTexWrap=1
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=0.005
fWaveScale=0.118
fWaveSmoothing=0.900
fWaveParam=-0.480
fModWaveAlphaStart=0.400
fModWaveAlphaEnd=1.600
fWarpAnimSpeed=1.459
fWarpScale=2.007
fZoomExponent=1.00000
fShader=0.000
zoom=0.99990
rot=-0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=0.99990
sy=1.00000
wave_r=0.800
wave_g=0.490
wave_b=1.000
wave_x=0.500
wave_y=0.500
ob_size=0.035
ob_r=0.000
ob_g=0.000
ob_b=0.000
ob_a=0.000
ib_size=0.260
ib_r=0.250
ib_g=0.250
ib_b=0.250
ib_a=0.000
nMotionVectorsX=64.000
nMotionVectorsY=48.000
mv_dx=0.000
mv_dy=0.000
mv_l=1.850
mv_r=0.500
mv_g=0.500
mv_b=0.500
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.000
per_frame_1=//Improved timedelay system
per_frame_2=timedelay -= 1/fps;
per_frame_3=if(timedelay <= 0, timedelay = 0, timedelay);
per_frame_4=
per_frame_5=// Short implementation of delayed beat.
per_frame_6=if(bass >= 1.8 && timedelay == 0, beat = 1; timedelay = .5, beat = 0);
per_frame_7=
per_frame_8=timesave = if (beat, time, timesave);
per_frame_9=q1 = timesave;
per_frame_10=q2 = timedelay;
warp_1=`shader_body {
warp_2=`//ret = 1;
warp_3=`}
comp_1=`//Original ShaderToy code: https://www.shadertoy.com/view/W3G3zh
comp_2=`//by Xor (XorDev)
comp_3=`//Converted to MilkDrop (HLSL) by DJ XcitMosphere/Incubo_/Se7enSlasher & DeepSeek
comp_4=`
comp_5=`shader_body
comp_6=`{
comp_7=`    //DeepSeek - Bass Zooming (comment the first 2 lines if you want to disable)
comp_8=`    float zoomFactor = 1.0 + (bass_att+mid_att+treb_att) * 0.01; // Adjust the multiplier to control the zoom intensity, tweaked by me
comp_9=`    uv = float2(0.5, 0.5) + (uv_orig - float2(0.5, 0.5)) / zoomFactor;
comp_10=`
comp_11=`    // Animation time
comp_12=`    float t = q1;
comp_13=`    // Raymarch depth
comp_14=`    float z = 0;
comp_15=`    // Step distance
comp_16=`    float d = 0;
comp_17=`    // Signed distance
comp_18=`    float s = 0;
comp_19=`    // Raymarch iterator
comp_20=`    float i = 0;
comp_21=`    
comp_22=`    float4 O;
comp_23=`    
comp_24=`    // Convert uv to pixel coordinates (similar to ShaderToy's I)
comp_25=`    float2 I = uv * texsize;
comp_26=`    
comp_27=`    // Clear fragColor and raymarch 100 steps
comp_28=`    for(; i < 1e1; i++)
comp_29=`    {
comp_30=`        // Sample point (from ray direction)
comp_31=`        float3 p = z * normalize(float3(I+I, 0) - texsize.xyy);
comp_32=`        // Rotation axis
comp_33=`        float3 a = normalize(cos(float3(7, 1, 0) + t - s));
comp_34=`        // Move camera back 9 units
comp_35=`        p.z += 9.;
comp_36=`        // Rotated coordinates
comp_37=`        a = a * dot(a, p) - cross(a, p);
comp_38=`        
comp_39=`        // Turbulence loop
comp_40=`        for(d = 1.; d < 9.; d++)
comp_41=`            a += sin(a * d + t).yzx / d;
comp_42=`        
comp_43=`        // Distance to spherical rings
comp_44=`        s = length(a);
comp_45=`        d = 0.03 * abs(sin(s));
comp_46=`        z += d;
comp_47=`        
comp_48=`        // Coloring and brightness
comp_49=`        O += (cos(z / 0.03 + t + float4(0, 2, 3, 0)) + 1.) / d / s;
comp_50=`    }
comp_51=`    
comp_52=`    // HLSL tonemap
comp_53=`    //XorDev - told me to replace tanh(x) with 1-exp(-x), which it works.
comp_54=`    float4 result = O / 3e3 * exp(q2*5); //Make this as a separate result.
comp_55=`    O = 1-exp(-result); //Then output tonemapping without thresholding.
comp_56=`    ret = O;
comp_57=`}
