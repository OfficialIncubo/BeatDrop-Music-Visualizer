MILKDROP_PRESET_VERSION=201
PSVERSION=4
PSVERSION_WARP=4
PSVERSION_COMP=2
[preset00]
fRating=1.000
fGammaAdj=1.980
fDecay=0.500
fVideoEchoZoom=1.000
fVideoEchoAlpha=0.500
nVideoEchoOrientation=3
nWaveMode=0
bAdditiveWaves=1
bWaveDots=0
bWaveThick=1
bModWaveAlphaByVolume=1
bMaximizeWaveColor=1
bTexWrap=1
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=0.000
fWaveScale=0.118
fWaveSmoothing=0.900
fWaveParam=-0.480
fModWaveAlphaStart=0.400
fModWaveAlphaEnd=1.600
fWarpAnimSpeed=1.459
fWarpScale=2.007
fZoomExponent=1.00000
fShader=0.000
zoom=1.00000
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.00000
sx=1.00000
sy=1.00000
wave_r=0.800
wave_g=0.490
wave_b=1.000
wave_x=0.500
wave_y=0.500
ob_size=0.035
ob_r=0.000
ob_g=0.000
ob_b=0.000
ob_a=0.000
ib_size=0.260
ib_r=0.250
ib_g=0.250
ib_b=0.250
ib_a=0.000
nMotionVectorsX=64.000
nMotionVectorsY=48.000
mv_dx=0.000
mv_dy=0.000
mv_l=1.850
mv_r=0.500
mv_g=0.500
mv_b=0.500
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.000
warp_1=`//Original ShaderToy code: https://www.shadertoy.com/view/wXKSDW
warp_2=`//by Xor (XorDev)
warp_3=`//Converted to MilkDrop (HLSL) by DeepSeek: https://www.deepseek.com
warp_4=`//Modified by Se7enSlasher
warp_5=`
warp_6=`shader_body
warp_7=`{
warp_8=`    float2 aspect_ts = float2(1, texsize.y/texsize.x); //Self-made texsize aspect-correcting
warp_9=`    uv = uv*2 - 1;
warp_10=`    uv *= aspect_ts;
warp_11=`    uv.y = -uv.y; //Y flip for equivalency of ShaderToy
warp_12=`
warp_13=`    float3 p, c = 0;
warp_14=`    float z = 0.0;
warp_15=`    float d, l;
warp_16=`    
warp_17=`    for (float i = 1; i <= 60; i++)
warp_18=`    {
warp_19=`        // Ray setup
warp_20=`        float3 ray_dir = normalize(float3(uv*2, -1));
warp_21=`        p = z * ray_dir + sin(0.5 * time);
warp_22=`        
warp_23=`        // Camera position
warp_24=`        p.z += 5;
warp_25=`        
warp_26=`        // Rotation matrix with time and y-dependent phase
warp_27=`        float angle = time + p.y * .4;
warp_28=`        float2x2 rot_mat = transpose(float2x2(cos(angle), -sin(angle), sin(angle), cos(angle)));
warp_29=`        // In GLSL is column-major order and in HLSL, row-major order,
warp_30=`        // So we transpose the matrix with transpose() to be the same as GLSL.
warp_31=`        p.xz = mul(rot_mat, p.xz);
warp_32=`        
warp_33=`        // Distance to base sphere
warp_34=`        d = length(p);
warp_35=`        
warp_36=`        // Light distance calculation
warp_37=`        l = length(cos(p / (d * .1)) + p.y + d);
warp_38=`        
warp_39=`        // UFO shape distance field
warp_40=`        float3 exp_calc = exp(-p*p / .1);
warp_41=`        float ufo_shape = d - 0.8 - exp_calc.y;
warp_42=`        
warp_43=`        // Step distance (minimum of light distance and UFO shape)
warp_44=`        d = min(l, ufo_shape) / 9;
warp_45=`        
warp_46=`        // March forward
warp_47=`        z += d;
warp_48=`        
warp_49=`        // Color accumulation
warp_50=`        c += float3(5, 9, 2 + d * 50) / (l * z);
warp_51=`    }
warp_52=`    
warp_53=`    // Tonemapping
warp_54=`    //XorDev - told me to replace tanh(x) with 1-exp(-x), which it works.
warp_55=`    float3 result = c * c / 7e3; //Make this as a separate result.
warp_56=`    ret = 1-exp(-result); //Then output tonemapping without thresholding.
warp_57=`}
comp_1=`shader_body
comp_2=`{
comp_3=`   ret = GetPixel(uv);
comp_4=`}
