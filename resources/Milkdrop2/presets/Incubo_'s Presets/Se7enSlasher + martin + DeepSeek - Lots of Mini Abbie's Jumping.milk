MILKDROP_PRESET_VERSION=201
PSVERSION=4
PSVERSION_WARP=2
PSVERSION_COMP=4
[preset00]
fRating=3.000
fGammaAdj=2.000
fDecay=0.925
fVideoEchoZoom=1.007
fVideoEchoAlpha=0.000
nVideoEchoOrientation=3
nWaveMode=7
bAdditiveWaves=1
bWaveDots=0
bWaveThick=0
bModWaveAlphaByVolume=1
bMaximizeWaveColor=0
bTexWrap=0
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=0
bSolarize=0
bInvert=0
fWaveAlpha=4.100
fWaveScale=1.286
fWaveSmoothing=0.630
fWaveParam=0.000
fModWaveAlphaStart=0.710
fModWaveAlphaEnd=1.300
fWarpAnimSpeed=0.751
fWarpScale=1.331
fZoomExponent=1.00000
fShader=0.000
zoom=0.99951
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=1.00000
sy=1.00000
wave_r=0.650
wave_g=0.650
wave_b=0.650
wave_x=0.500
wave_y=0.500
ob_size=0.500
ob_r=0.010
ob_g=0.000
ob_b=0.000
ob_a=0.000
ib_size=0.260
ib_r=0.250
ib_g=0.250
ib_b=0.250
ib_a=0.000
nMotionVectorsX=12.000
nMotionVectorsY=9.000
mv_dx=0.000
mv_dy=0.000
mv_l=0.900
mv_r=1.000
mv_g=1.000
mv_b=1.000
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.250
per_frame_init_1=i=0; loop (5000,i[0]=0; gmem[i]=0; i+=1;);
per_frame_init_2=octaves=3; minbpm=75; maxbpm=200; nres_oct=60; 
per_frame_init_3=nres_extra=nres_oct/log(2)*log(maxbpm/minbpm/2);
per_frame_init_4=nres=nres_oct*octaves+nres_extra;
per_frame_init_5=bstep = log(2)/nres_oct;
per_frame_init_6=nres_out = ceil(nres_oct+nres_extra); //int is necessary !
per_frame_init_7=
per_frame_init_8=maxind = 40;
per_frame_init_9=i=0;
per_frame_init_10=loop (nres,
per_frame_init_11= //precalculate BPM
per_frame_init_12=  (8*i)[3]=minbpm*exp(i*bstep); 
per_frame_init_13= //precalculate weighting
per_frame_init_14=  if (i<=nres_out,(8*i)[4]=min(2,1+sin($pi*i/nres_out)*3)/2,0);; 
per_frame_init_15=i+=1);
per_frame_init_16=
per_frame_init_17=BPMScrollTime = 0;
per_frame_init_18=
per_frame_init_19=rand1_neg = int(rand(2));
per_frame_init_20=rand2_neg = int(rand(2));
per_frame_init_21=
per_frame_init_22=rand1_neg_nextrow = int(rand(2));
per_frame_init_23=rand2_neg_nextrow = int(rand(2));
per_frame_init_24=
per_frame_init_25=rand1 = if(rand1_neg, rand(1)/5, -(rand(1)/2));
per_frame_init_26=rand2 = if(rand2_neg, rand(1)/5, -(rand(1)/2));
per_frame_init_27=
per_frame_init_28=rand1_nextrow = if(rand1_neg_nextrow, rand(1)*25, -(rand(1)*25));
per_frame_init_29=rand2_nextrow = if(rand2_neg_nextrow, rand(1)*25, -(rand(1)*25));
per_frame_1=//martin/Nitorami - DFT based BPM identification
per_frame_2=
per_frame_3=dt=1/fps; 
per_frame_4=tcorr = (dt - dt_); //to compensate timing errors caused by MD's time smoothing
per_frame_5=dt_= dt;
per_frame_6=treal += dt + tcorr*38; //I-share of timing error comp.
per_frame_7=exc=2*bass+mid+treb;  //choose what you like but mind this could affect quali
per_frame_8=d0= exp(-1.5*dt);
per_frame_9=i=0; avg = 0;
per_frame_10=loop (nres,
per_frame_11=  n = 8*i;
per_frame_12=  w = 2*$pi/60*n[3];
per_frame_13=  d = 1-dt*w*0.013; //DFT smoothing optimised for nres_oct=60
per_frame_14=  arg = treal*w + tcorr*15000; //P-share of timing error comp.
per_frame_15=  n[1] = n[1]*d +exc*cos(arg)*(1-d); //DFT real part
per_frame_16=  n[2] = n[2]*d +exc*sin(arg)*(1-d); //DFT imaginary part
per_frame_17=  if (i<nres_out, 
per_frame_18=    n2 = 8*(i+nres_oct);
per_frame_19=    n4 = 8*(i+nres_oct*2);
per_frame_20=    sum = sqrt (sqr(n[1])+sqr(n[2]) + sqr(n2[1])+sqr(n2[2]) + sqr(n4[1])+sqr(n4[2]));
per_frame_21=    avg += sum;
per_frame_22=    n[0]= n[0]*d0+sum*(1-d0)*n[4];
per_frame_23=    if (n[0]>(8*promax)[0], promax=max(2,min(nres_out-2,i));,0); 
per_frame_24=  ,0);
per_frame_25=i += 1;);
per_frame_26=avg_ = avg_*d0 + (1-d0)*avg/nres_out;
per_frame_27=
per_frame_28=//Resist frequent BPM changes
per_frame_29=m8 = 8*maxind;
per_frame_30=wait += abs(m8[0]-(8*promax)[0])*dt*100; 
per_frame_31=if (wait>abs(promax-maxind)*80/nres_oct, maxind=promax; wait = 0,0);
per_frame_32=
per_frame_33=//OUTPUT
per_frame_34=BPM = m8[3];
per_frame_35=
per_frame_36=//Se7enSlasher - Convert BPM to integer and do a simple rounding.
per_frame_37=//intBPM = floor(BPM+.5); //More efficient way?
per_frame_38=intBPM = int(BPM);
per_frame_39=
per_frame_40=q1 = intBPM;
per_frame_41=monitor = q1;
per_frame_42=
per_frame_43=time_sync += ((1/fps) * (q1/30))/2;
per_frame_44=time_sync = if (time_sync >= 2, 0, time_sync);
per_frame_45=
per_frame_46=//martin (Nitorami)
per_frame_47=t1 += q1/60*$PI*dt;
per_frame_48=
per_frame_49=bpmMod = if(time_sync >= 0 && time_sync <= 1, 0, 1);
per_frame_50=
per_frame_51=//martin (Nitorami)
per_frame_52=jump1 = max(0, sin(t1));
per_frame_53=jump2 = max(0, sin(t1+$PI));
per_frame_54=
per_frame_55=jump1 = if(timeUntilStop <= 0, 0, jump1);
per_frame_56=jump2 = if(timeUntilStop <= 0, 0, jump2);
per_frame_57=
per_frame_58=//Used for smooth landing when it's no music
per_frame_59=dec= exp(-30/fps);
per_frame_60=jump1_=dec*jump1_+(1-dec)*jump1;
per_frame_61=jump2_=dec*jump2_+(1-dec)*jump2;
per_frame_62=
per_frame_63=
per_frame_64=//Se7enSlasher - Timed Stop Technique
per_frame_65=//Change the t1 value to 0 when there is no sound.
per_frame_66=timeUntilStop = if (bass+mid+treb > 0, .5, timeUntilStop);
per_frame_67=timeUntilStop -= 1/fps;
per_frame_68=t1 = if(timeUntilStop <= 0, 0, t1);
per_frame_69=
per_frame_70=q31 = if(timeUntilStop <= 0, jump1_, jump1);
per_frame_71=q32 = if(timeUntilStop <= 0, jump2_, jump2);
per_frame_72=
per_frame_73=monitor = t1;
per_frame_74=
per_frame_75=wave_a = 0;
per_frame_76=decay = 0;
per_frame_77=
per_frame_78=BPMScrollTime += smooth_BPM*.00015;
per_frame_79=q5 = BPMScrollTime;
per_frame_80=
per_frame_81=dec = 1/fps;
per_frame_82=smooth_BPM = smooth_BPM * (1-dec) + q1 * dec;
per_frame_83=
per_frame_84=monitor = q1;
per_frame_85=
per_frame_86=q6 = rand1;
per_frame_87=q7 = rand2;
per_frame_88=q8 = rand1_nextrow;
per_frame_89=q9 = rand2_nextrow;
warp_1=`shader_body
warp_2=`{
warp_3=`}
comp_1=`#define Abbie_Normal sampler_ibtSw4_spr_jump0
comp_2=`#define Abbie_YAY sampler_ibtSw4_spr_jump1
comp_3=`sampler Abbie_Normal;
comp_4=`sampler Abbie_YAY;
comp_5=`
comp_6=`float ry, j;
comp_7=`float2 uvi;
comp_8=`float3 tmp;
comp_9=`
comp_10=`shader_body
comp_11=`{
comp_12=`  //Background    
comp_13=`  ret = float3(0.8627, 0.6157, 0.9922);
comp_14=`
comp_15=`  float row_spacing = .65;
comp_16=`
comp_17=`  //aspect corr and global scaling
comp_18=`  uv *= 3.5;
comp_19=`  q31 *= 0.35;
comp_20=`  q32 *= 0.35;
comp_21=`
comp_22=`  //aspect corr and global scaling
comp_23=`  float2 aspect_texsize = float2(1, texsize.y/texsize.x);
comp_24=`  uv = (uv-0.5)*aspect_texsize+0.5;
comp_25=`
comp_26=`  //DeepSeek - Dynamic Row Count Aspect Ratio Calculation  
comp_27=`  float aspect_ratio = texsize.x / texsize.y;
comp_28=`  int row_count = 5; // Default for 4:3 and 1:1
comp_29=`
comp_30=`  // Adjust row count for extreme aspect ratios
comp_31=`  if (aspect_ratio > 1.5) { // Very wide (e.g., 16:9)
comp_32=`    row_count = 3;
comp_33=`  }
comp_34=`  else if (aspect_ratio < 0.75) { // Very tall (e.g., 9:16)
comp_35=`    row_count = 8;
comp_36=`  }
comp_37=`
comp_38=`  for (int row=1; row<=row_count; row++) {
comp_39=`    j = q31;
comp_40=`    uvi = uv+float2((q5*(row*2.5))/5 + q6*(row*q8), j+.85 - row*row_spacing);
comp_41=`    ry = (uvi.y);
comp_42=`    tmp = lerp(tex2D(Abbie_Normal,uvi), tex2D(Abbie_YAY,uvi), j>0.0001)*(ry<1)*(ry>0);
comp_43=`    ret = lerp(ret, tmp, lum(tmp)>0);
comp_44=`
comp_45=`    j = q32;
comp_46=`    uvi = uv+float2((q5*(row*2.5))/5 + q7*(row*q9), j+.55 - row*row_spacing);
comp_47=`    ry = (uvi.y);
comp_48=`    tmp = lerp(tex2D(Abbie_Normal,uvi), tex2D(Abbie_YAY,uvi), j>0.0001)*(ry<1)*(ry>0);
comp_49=`    ret = lerp(ret, tmp, lum(tmp)>0);
comp_50=`  }
comp_51=`}
