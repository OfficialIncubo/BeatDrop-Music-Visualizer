MILKDROP_PRESET_VERSION=201
PSVERSION=4
PSVERSION_WARP=4
PSVERSION_COMP=3
[preset00]
fRating=5.000
fGammaAdj=1.460
fDecay=0.935
fVideoEchoZoom=1.007
fVideoEchoAlpha=0.500
nVideoEchoOrientation=2
nWaveMode=15
bAdditiveWaves=1
bWaveDots=0
bWaveThick=1
bModWaveAlphaByVolume=0
bMaximizeWaveColor=1
bTexWrap=1
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=1
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=0.001
fWaveScale=0.625
fWaveSmoothing=0.900
fWaveParam=0.000
fModWaveAlphaStart=0.880
fModWaveAlphaEnd=1.980
fWarpAnimSpeed=1.459
fWarpScale=2.007
fZoomExponent=1.00000
fShader=1.000
zoom=0.99990
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=0.99990
sy=1.00000
wave_r=0.000
wave_g=0.000
wave_b=0.000
wave_x=0.500
wave_y=0.500
ob_size=0.000
ob_r=0.000
ob_g=0.000
ob_b=0.200
ob_a=1.000
ib_size=0.000
ib_r=0.000
ib_g=0.000
ib_b=0.250
ib_a=1.000
nMotionVectorsX=64.000
nMotionVectorsY=48.000
mv_dx=0.000
mv_dy=0.000
mv_l=1.000
mv_r=1.060
mv_g=1.000
mv_b=0.819
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.250
per_frame_init_1=p1 = 2000; p2 = 200; p3=50;
per_frame_1=chng=sin(time*.5);
per_frame_2=cthr=.9999;
per_frame_3=mq21=if(above(chng,cthr),rand(3),mq21);
per_frame_4=mq22=if(above(chng,cthr),rand(3),mq22);
per_frame_5=mq23=if(above(chng,cthr),rand(3),mq23);
per_frame_6=mq24=if(above(chng,cthr),rand(2),mq24);
per_frame_7=mq25=if(above(chng,cthr),rand(2),mq25);
per_frame_8=mq26=if(above(chng,cthr),rand(2),mq26);
per_frame_9=mq27=if(above(chng,cthr),rand(1),mq27);
per_frame_10=mq28=if(above(chng,cthr),rand(1),mq28);
per_frame_11=mq29=if(above(chng,cthr),rand(1)*.3,mq29);
per_frame_12=mq31=if(above(chng,cthr),rand(1)*.3,mq31);
per_frame_13=monitor=chng;
per_frame_14=q21=mq21;q22=mq22;q23=mq23;q24=mq24;q25=mq25;q26=mq26;
per_frame_15=q27=mq27;q28=mq28;q29=mq29;q31=mq31;
per_frame_16=
per_frame_17=monitor=mq1;
per_frame_18=vol=bass+treb+mid;
per_frame_19=atime=atime+vol;
per_frame_20=q11=.4+sin(atime*.006        )*.4;
per_frame_21=q12=.4+cos(atime*.00613828348)*.4;
per_frame_22=q13=.4+sin(atime*.00598593455)*.4;
per_frame_23=monitor=q13;
per_frame_24=
per_frame_25=dec_med = pow (0.9, 30/fps);
per_frame_26=dec_slow = pow (0.9, 30/fps);
per_frame_27=beat = max (max (bass, mid), treb); 
per_frame_28=avg = avg*dec_slow + beat*(1-dec_slow);
per_frame_29=is_beat = above(beat, .1+avg+peak) * above (time, t0+.2);
per_frame_30=t0 = is_beat*time + (1-is_beat)*t0;
per_frame_31=peak = is_beat * beat + (1-is_beat)*peak*dec_med;
per_frame_32=index = (index + is_beat) %16;
per_frame_33=index2 = (index2 + is_beat*bnot(index))%5;
per_frame_34=monitor = index2;
per_frame_35=
per_frame_36=q20 = avg;
per_frame_37=q21 = beat;
per_frame_38=q22 = peak;
per_frame_39=q23 = index;
per_frame_40=q24 = is_beat;
per_frame_41=q26 = bass + mid + treb;
per_frame_42=q27 = index;
per_frame_43=q28 = index2;
per_frame_44=
per_frame_45=k1 =  is_beat*equal(index%2,0);
per_frame_46=p1 =  k1*(p1+1) + (1-k1)*p1;
per_frame_47=p2 = dec_med * p2+ (1-dec_med)*p1;
per_frame_48=rott_ = p2 * 3.1416/4;
per_frame_49=
per_frame_50=rott =  rott +  .2*30/fps*q2;
per_frame_51=
per_frame_52=
per_frame_53=q1 = cos(rott);
per_frame_54=q2 = sin(rott);
per_frame_55=q3 = -q2;
per_frame_56=q4 = q1;
per_frame_57=
per_frame_58=ran = bnot(q24)*ran + q24 * (int(rand(50))-24);
per_frame_59=tran = tan(ran);
per_frame_60=tran = max(tran,-5);
per_frame_61=tran = min(tran,5);
per_frame_62=
per_frame_63=trel = trel + .02*30/fps*tran+q24;
per_frame_64=q5 = cos(trel);
per_frame_65=q6 = sin(trel);
per_frame_66=q7 = -q6;
per_frame_67=q8 = q5;
per_frame_68=
per_frame_69=movex = movex*dec_slow + .1*sin(rott)*30/fps;
per_frame_70=q9 = movex;
per_frame_71=
per_frame_72=spd = spd*bnot(q24) + q26*q24;
per_frame_73=movez = movez + .005*30/fps*spd;
per_frame_74=q30 = movez;
per_frame_75=//q30 = .3* (sin(time/45) + 1.5);
per_frame_76=
per_frame_77=mv_x = 20;
per_frame_78=mv_y = 15;
per_frame_79=mv_a = .1;
per_frame_80=mv_l = 0;
per_frame_81=
per_frame_82=q18 = sin(time/7);
per_frame_83=q19 = sin(time/11);
per_frame_84=
per_frame_85=q32 = pow(0.98, 30/fps); //fade
per_frame_86=
per_pixel_1=zoom = 1;
per_pixel_2=warp = .1;
warp_1=`shader_body{
warp_2=`
warp_3=`//Shader from Marten Range 
warp_4=`//https://www.shadertoy.com/view/tfK3Dy
warp_5=`//Ported to MilkDrop by MilkDrop2077
warp_6=`
warp_7=`    float4 o = float4(0,0,0,0);
warp_8=`    float4 P, p;
warp_9=`    float4 U = float4(1,2,3,0);
warp_10=`    
warp_11=`    // Musical timing using bass_att for volume sensitivity
warp_12=`    float T = time * 2.0 * 0.5;
warp_13=`    float F = frac(T);
warp_14=`    float t = floor(T) + sqrt(F);
warp_15=`    
warp_16=`    // Create rotation matrices
warp_17=`    float angle = t*0.1 + 11.0*U.w;
warp_18=`    float2x2 R = transpose(float2x2(cos(angle), -sin(angle), sin(angle), cos(angle)));
warp_19=`    // In GLSL is column-major order and in HLSL, row-major order,
warp_20=`    // So we transpose the matrix with transpose() to be the same as GLSL.
warp_21=`    
warp_22=`    // Raymarching loop
warp_23=`    float z = 0.0;
warp_24=`    for(float i=0.0; i<77.0; i+=1.0) {
warp_25=`        // Create ray from camera
warp_26=`        float2 centered_uv = (uv - 0.5) * aspect.xy;
warp_27=`        centered_uv.y = -centered_uv.y; //Flip UV
warp_28=`        p = float4(z*normalize(float3(centered_uv, 1.0)), 0.2);
warp_29=`        
warp_30=`        // Move camera back
warp_31=`        p.z -= 3.0;
warp_32=`        
warp_33=`        // Apply rotations to different planes
warp_34=`        p.xw = float2(p.x*R[0][0] + p.w*R[0][1], p.x*R[1][0] + p.w*R[1][1]);
warp_35=`        p.yw = float2(p.y*R[0][0] + p.w*R[0][1], p.y*R[1][0] + p.w*R[1][1]);
warp_36=`        p.zw = float2(p.z*R[0][0] + p.w*R[0][1], p.z*R[1][0] + p.w*R[1][1]);
warp_37=`        
warp_38=`        // Inversion
warp_39=`        float k = 9.0/dot(p,p);
warp_40=`        p *= k;
warp_41=`        
warp_42=`        // Offset by time
warp_43=`        P = p -= 0.5*t+q7;
warp_44=`        
warp_45=`        // Fold space
warp_46=`        p = abs(p - round(p));
warp_47=`        
warp_48=`        // Distance field calculation
warp_49=`        float d = abs(min(
warp_50=`            min(min(length(p.xz), length(p.yz)), length(p.xy)),
warp_51=`            min(length(p)-0.2, min(p.w, min(p.x, min(p.z, p.y))) + 0.05
warp_52=`        ))/k);
warp_53=`        
warp_54=`        z += 0.8*d + 1e-3;
warp_55=`        
warp_56=`        // Color calculation
warp_57=`        p = 1.0 + sin(P.z + log2(k) + U.wxyw);
warp_58=`        
warp_59=`        // Accumulate color with beat fade
warp_60=`        o += U*exp(0.5*k - 6.0*F) + p.w*p/max(d, 1e-3);
warp_61=`    }
warp_62=`    
warp_63=`    float brightness = 0.5 + 0.5;
warp_64=`    o = clamp(o/1e4 * brightness, -6.0, 6.0);   // <- keeps tanh happy
warp_65=`    ret = tanh(o)/0.9;
warp_66=`}
comp_1=`shader_body
comp_2=`{
comp_3=` //uv.y = -uv.y;
comp_4=` ret = GetPixel(uv);
comp_5=`}
