MILKDROP_PRESET_VERSION=201
PSVERSION=4
PSVERSION_WARP=4
PSVERSION_COMP=3
[preset00]
fRating=5.000
fGammaAdj=1.460
fDecay=0.935
fVideoEchoZoom=1.007
fVideoEchoAlpha=0.500
nVideoEchoOrientation=2
nWaveMode=2
bAdditiveWaves=0
bWaveDots=0
bWaveThick=1
bModWaveAlphaByVolume=0
bMaximizeWaveColor=1
bTexWrap=1
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=1
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=0.000
fWaveScale=2.911
fWaveSmoothing=0.900
fWaveParam=0.000
fModWaveAlphaStart=1.110
fModWaveAlphaEnd=1.230
fWarpAnimSpeed=1.459
fWarpScale=2.007
fZoomExponent=1.00000
fShader=1.000
zoom=0.99990
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=0.99990
sy=1.00000
wave_r=0.500
wave_g=0.500
wave_b=0.800
wave_x=0.500
wave_y=0.500
ob_size=0.010
ob_r=1.000
ob_g=1.000
ob_b=1.000
ob_a=0.000
ib_size=0.110
ib_r=0.250
ib_g=0.250
ib_b=0.250
ib_a=0.000
nMotionVectorsX=12.000
nMotionVectorsY=9.000
mv_dx=0.000
mv_dy=0.000
mv_l=0.900
mv_r=1.000
mv_g=1.000
mv_b=1.000
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.250
per_frame_1=dec_med = pow (0.7, 30/fps);
per_frame_2=dec_slow = pow (0.96, 30/fps);
per_frame_3=beat = max (max (bass, mid), treb); 
per_frame_4=avg = avg*dec_slow + beat*(1-dec_slow);
per_frame_5=is_beat = above(beat, .2+avg+peak) * above (time, t0+.2);
per_frame_6=t0 = is_beat*time + (1-is_beat)*t0;
per_frame_7=peak = is_beat * beat + (1-is_beat)*peak*dec_med;
per_frame_8=index = (index + is_beat) %8;
per_frame_9=index2 = (index2 + is_beat*bnot(index))%4;
per_frame_10=index3 = (index3 + is_beat*bnot(index)*bnot(index2))%3;
per_frame_11=
per_frame_12=q20 = avg;
per_frame_13=q21 = beat;
per_frame_14=q22 = peak;
per_frame_15=q23 = index;
per_frame_16=q24 = is_beat;
per_frame_17=q26 = bass_att + mid_att + treb_att ;
per_frame_18=q27 = index + 1;
per_frame_19=q28 = index2;
per_frame_20=
per_frame_21=
per_frame_22=k1 =  is_beat*equal(index%2,0);
per_frame_23=p1 =  k1*(p1+1) + (1-k1)*p1;
per_frame_24=p2 = dec_med * p2+ (1-dec_med)*p1;
per_frame_25=rott = p2 * 3.1416/2;
per_frame_26=
per_frame_27=q1 = cos(rott);
per_frame_28=q2 = sin(rott);
per_frame_29=q3 = -q2;
per_frame_30=q4 = q1;
per_frame_31=
per_frame_32=
per_frame_33=vol = vol*dec_slow + q26 * (1-dec_slow) + q24*q1;
per_frame_34=q10 = q27*q28;;
per_frame_35=
per_frame_36=
per_frame_37=movex = movex + .03*30/fps;
per_frame_38=q29 = movex;
per_frame_39=movez = movez + .07*30/fps;
per_frame_40=q30 = movez;
per_frame_41=
per_frame_42=q31 = 6 + 4*(1+sin(time/7));
per_frame_43=
per_frame_44=zoom = 1;
per_frame_45=dy = .00;
per_frame_46=dx = .0;
per_frame_47=warp = 0;
per_frame_48=rot = .0;
per_frame_49=
warp_1=`//Shader from Yohei Nishitsuji
warp_2=`//https://x.com/YoheiNishitsuji/status/1949255489864581135
warp_3=`//Ported to MilkDrop by MilkDrop2077
warp_4=`//MIT Licensed
warp_5=`
warp_6=`// Helper: 2D rotation matrix
warp_7=`float2x2 rotate2D(float angle) {
warp_8=`    float s = sin(angle);
warp_9=`    float c = cos(angle);
warp_10=`    return transpose(float2x2(c, -s, s, c));
warp_11=`}
warp_12=`// In GLSL is column-major order and in HLSL, row-major order,
warp_13=`// So we transpose the matrix with transpose() to be the same as GLSL. 
warp_14=`
warp_15=`// Helper: HSV to RGB
warp_16=`float3 hsv(float h, float s, float v) {
warp_17=`    float3 k = float3(1.0, 2.0/3.0, 1.0/3.0);
warp_18=`    float3 p = abs(frac(h + k) * 6.0 - 3.0);
warp_19=`    return v * lerp(float3(1,1,1), saturate(p - 1.0), s);
warp_20=`}
warp_21=`
warp_22=`// Helper: mod (like GLSL)
warp_23=`float mod(float a, float b) {
warp_24=`    return a - b * floor(a / b);
warp_25=`}
warp_26=`
warp_27=`shader_body
warp_28=`{
warp_29=`    uv = (uv_orig * aspect.xy - 0.5 * aspect.xy) / aspect.y;
warp_30=`    uv.y = -uv.y;
warp_31=`    float t = time / 3.0;
warp_32=`    float3 col = float3(0.0, 0.0,0.0);
warp_33=`    float g = 0.0;
warp_34=`
warp_35=`    for (float i = 0.0; i < 80.0; i++) {
warp_36=`        float3 p = float3(uv * 1.5 * (cos(t * 0.3+q10) * 0.2 + 0.6), g - 0.4);
warp_37=`        p.xz = mul(rotate2D(t * 0.5), p.xz);
warp_38=`        float s = 1.0;
warp_39=`        float e = 0.0;
warp_40=`
warp_41=`        for (int j = 0; j < 12; j++) {
warp_42=`            e = max(1.01, 7.0 / dot(p, p));
warp_43=`            p = abs(abs(p) * e - float3(4.6+q1/6, 2.0+q1/5, 1.2+q1/3));
warp_44=`            p = float3(3.5, 5.0, 0.5) - p;
warp_45=`            s *= e;
warp_46=`        }
warp_47=`
warp_48=`        g += mod(length(p.zx), p.y) / s;
warp_49=`        float final_s = log2(s) / g;
warp_50=`        col += hsv(e, p.z, final_s / 1e4);
warp_51=`    }
warp_52=`
warp_53=`    ret = float4(sqrt(col), 1.0);
warp_54=`}
comp_1=`#define sat saturate
comp_2=`float glow, tmp, lamp, dist, bdist, b2dist, dist_c, smask;
comp_3=`float2 dz, uv1, uv3, uv4;
comp_4=`static const float3 CamPos = float3(q4,q5,q6);
comp_5=`static const float myzoom = q7,  res = 255, res2 = 64, tele = q16;
comp_6=`static const float3x3 RotMat = float3x3(q20,q21,q22,q23,q24,q25,q26,q27,q28);
comp_7=`
comp_8=`float2 fstep2 (float2 xy) {return 1.0/res*round(res*xy);}
comp_9=`
comp_10=`float GetDist(float2 uvi) {float2 tmp; tmp = (tex2D (sampler_fc_main, uvi).gb); 
comp_11=`return 1.0078125-tmp.y -0.015625*tmp.x;} // = 1-(tmp.y + 1.0/res2*(tmp.x-.10));}
comp_12=`
comp_13=`float GetDistB(float2 uvi)  {return 1-GetBlur1(uvi).b;}
comp_14=`float3 screen3;
comp_15=`float3 lavcol (float t) {return saturate(float3(pow(t,1),pow(t,2.),pow(t,5)));}
comp_16=`
comp_17=`static float3 t = float3(3,3,3);
comp_18=`static float3 s = float3(1,1,1);
comp_19=`static float3 ts = -cross(s,t);
comp_20=`static float3 pos = float3 (1,1,1);
comp_21=`
comp_22=`float3 project (float dist) {  float z;
comp_23=`  z = 18*dist/mul(cross(ts,-t),screen3);
comp_24=`  return float3(mul(float2x3(ts,t),cross(pos,screen3))-z,-z);}
comp_25=`
comp_26=`shader_body {//MilkDrop3 Split Mode:
comp_27=`uv = float2 (abs(uv.x-0.5), uv.y);
comp_28=`
comp_29=`screen3 = float3 ((uv-.95)*aspect.xy,tele-0+1);
comp_30=`float3 uv2 = project(.1);
comp_31=`float3 sky = sat(lavcol (1-(abs(22/uv2.z))))-.2;
comp_32=`
comp_33=`bdist = min(GetDist(uv),GetDistB(uv));;
comp_34=`
comp_35=`sky *= sat(3*bdist-2);
comp_36=`ret = sat(lerp (0, sky, bdist));
comp_37=`
comp_38=`float struc = lerp(GetPixel(uv).r, GetBlur1((uv-.5)/5+.5).r,GetBlur1(uv).r-.8);
comp_39=`ret += lavcol(struc)*(2-pow(bdist,1+180*mid_att));
comp_40=`//ret = struc;
comp_41=`//MilkDrop3 Color Mode:
comp_42=`ret /= float3(1.5,1.9,0.9);
comp_43=`}
