MILKDROP_PRESET_VERSION=201
PSVERSION=4
PSVERSION_WARP=4
PSVERSION_COMP=2
[preset00]
fRating=5.000
fGammaAdj=1.460
fDecay=0.935
fVideoEchoZoom=1.007
fVideoEchoAlpha=0.500
nVideoEchoOrientation=2
nWaveMode=7
bAdditiveWaves=1
bWaveDots=0
bWaveThick=0
bModWaveAlphaByVolume=1
bMaximizeWaveColor=0
bTexWrap=0
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=1
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=0.001
fWaveScale=1.286
fWaveSmoothing=0.630
fWaveParam=0.000
fModWaveAlphaStart=0.710
fModWaveAlphaEnd=1.300
fWarpAnimSpeed=1.681
fWarpScale=2.953
fZoomExponent=0.01000
fShader=1.000
zoom=0.99010
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=1.24699
sx=1.00000
sy=1.00000
wave_r=0.650
wave_g=0.650
wave_b=0.650
wave_x=0.500
wave_y=0.500
ob_size=0.000
ob_r=0.000
ob_g=0.000
ob_b=0.000
ob_a=1.000
ib_size=0.000
ib_r=1.000
ib_g=0.000
ib_b=0.000
ib_a=1.000
nMotionVectorsX=64.000
nMotionVectorsY=22.982
mv_dx=0.000
mv_dy=0.000
mv_l=0.400
mv_r=1.000
mv_g=0.400
mv_b=1.000
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.250
wavecode_0_enabled=1
wavecode_0_samples=512
wavecode_0_sep=0
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=1
wavecode_0_bDrawThick=1
wavecode_0_bAdditive=1
wavecode_0_scaling=1.00000
wavecode_0_smoothing=0.50000
wavecode_0_r=0.870
wavecode_0_g=1.000
wavecode_0_b=1.000
wavecode_0_a=1.120
wave_0_init1=ma=.5;
wave_0_init2=my=.5;
wave_0_init3=md=0; //direction 0 1 2 3
wave_0_per_point1=oldmd=md;
wave_0_per_point2=md=(md+int(rand(4)))%4;
wave_0_per_point3=md=if(equal(md,oldmd),(md+1)%4,md);
wave_0_per_point4=
wave_0_per_point5=mx=mx+(equal(md,0)*.002*bass);
wave_0_per_point6=mx=mx-(equal(md,1)*.002*bass);
wave_0_per_point7=my=my+(equal(md,2)*.002*treb);
wave_0_per_point8=my=my-(equal(md,3)*.002*treb);
wave_0_per_point9=
wave_0_per_point10=mx=if(above(mx,.9),.5,mx);
wave_0_per_point11=mx=if(below(mx,.1),.5,mx);
wave_0_per_point12=my=if(above(my,.9),.5,my);
wave_0_per_point13=my=if(below(my,.1),.5,my);
wave_0_per_point14=
wave_0_per_point15=x=mx;
wave_0_per_point16=y=my;
wave_0_per_point17=a=bass*.1;
wave_0_per_point18=
wave_0_per_point19=r=bass*.5;
wavecode_1_enabled=1
wavecode_1_samples=512
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=1
wavecode_1_bDrawThick=1
wavecode_1_bAdditive=1
wavecode_1_scaling=1.01000
wavecode_1_smoothing=0.50000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=1.060
wave_1_init1=mx=.5;
wave_1_init2=my=.5;
wave_1_init3=md=1;
wave_1_per_point1=oldmd=md;
wave_1_per_point2=md=(md+int(rand(4)))%4;
wave_1_per_point3=md=if(equal(md,oldmd),(md+1)%4,md);
wave_1_per_point4=
wave_1_per_point5=mx=mx+(equal(md,0)*.002*bass);
wave_1_per_point6=mx=mx-(equal(md,1)*.002*bass);
wave_1_per_point7=my=my+(equal(md,2)*.002*treb);
wave_1_per_point8=my=my-(equal(md,3)*0.0018*treb);
wave_1_per_point9=
wave_1_per_point10=mx=if(above(mx,.9),.5,mx);
wave_1_per_point11=mx=if(below(mx,.1),.5,mx);
wave_1_per_point12=my=if(above(my,.9),.5,my);
wave_1_per_point13=my=if(below(my,.1),.5,my);
wave_1_per_point14=
wave_1_per_point15=x=mx;
wave_1_per_point16=y=my;
wave_1_per_point17=a=bass*.1;
wave_1_per_point18=
wave_1_per_point19=g=treb*.5;
wavecode_2_enabled=1
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=1
wavecode_2_bDrawThick=1
wavecode_2_bAdditive=1
wavecode_2_scaling=1.00000
wavecode_2_smoothing=0.50000
wavecode_2_r=0.870
wavecode_2_g=1.000
wavecode_2_b=1.000
wavecode_2_a=1.000
wave_2_init1=mx=.5;
wave_2_init2=my=.5;
wave_2_init3=md=2;
wave_2_per_point1=oldmd=md;
wave_2_per_point2=md=(md+int(rand(4)))%4;
wave_2_per_point3=md=if(equal(md,oldmd),(md+1)%4,md);
wave_2_per_point4=
wave_2_per_point5=mx=mx+(equal(md,0)*.002*bass);
wave_2_per_point6=mx=mx-(equal(md,1)*.002*bass);
wave_2_per_point7=my=my+(equal(md,2)*.002*treb);
wave_2_per_point8=my=my-(equal(md,3)*.002*treb);
wave_2_per_point9=
wave_2_per_point10=mx=if(above(mx,.9),.5,mx);
wave_2_per_point11=mx=if(below(mx,.1),.5,mx);
wave_2_per_point12=my=if(above(my,0.83),0.45,my);
wave_2_per_point13=my=if(below(my,.1),.5,my);
wave_2_per_point14=
wave_2_per_point15=x=mx;
wave_2_per_point16=y=my;
wave_2_per_point17=a=bass*.1;
wavecode_3_enabled=1
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=0
wavecode_3_bUseDots=1
wavecode_3_bDrawThick=1
wavecode_3_bAdditive=1
wavecode_3_scaling=1.00000
wavecode_3_smoothing=0.50000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=1.000
wave_3_init1=mx=.5;
wave_3_init2=my=.4;
wave_3_init3=md=3;
wave_3_per_point1=oldmd=md;
wave_3_per_point2=md=(md+int(rand(4)))%4;
wave_3_per_point3=md=if(equal(md,oldmd),(md+1)%4,md);
wave_3_per_point4=
wave_3_per_point5=mx=mx+(equal(md,0)*.002*bass);
wave_3_per_point6=mx=mx-(equal(md,1)*0.0019*bass);
wave_3_per_point7=my=my+(equal(md,2)*0.002*treb);
wave_3_per_point8=my=my-(equal(md,3)*.002*treb);
wave_3_per_point9=
wave_3_per_point10=mx=if(above(mx,0.95),0.47,mx);
wave_3_per_point11=mx=if(below(mx,.1),.5,mx);
wave_3_per_point12=my=if(above(my,.9),.5,my);
wave_3_per_point13=my=if(below(my,.1),.5,my);
wave_3_per_point14=
wave_3_per_point15=x=mx;
wave_3_per_point16=y=my;
wave_3_per_point17=a=bass*.1;
per_frame_1=//per frame less reactive volume for all unused q vars, put before other q vars are set for cop out mashing
per_frame_2=vb = vb*0.95 + (1-vb)*pow(bass_att,2)*0.02;
per_frame_3=vvb = vvb*0.95 + (1-vvb)*vb*0.01;
per_frame_4=vm = vm*0.95 + (1-vm)*pow(mid_att,2)*0.02;
per_frame_5=vvm = vvm*0.95 + (1-vvm)*vm*0.01;
per_frame_6=vt = vt*0.95 + (1-vt)*pow(treb_att,2)*0.02;
per_frame_7=vvt = vvt*0.95 + (1-vvt)*vt*0.01;
per_frame_8=vvb = min(1,max(0,vvb));
per_frame_9=vvm = min(1,max(0,vvm));
per_frame_10=vvt = min(1,max(0,vvt));
per_frame_11=q1 = vvb*2;//0.5 + vb - vvb;
per_frame_12=q2 = vvm*2;//0.5 + vm - vvm;
per_frame_13=q3 = vvt*2;//0.5 + vt - vvt;
per_frame_14=q4=(q1+q2+q3)*5;
per_frame_15=q5=(q1+q2+q3)*5;
per_frame_16=q6=(q1+q2+q3)*5;
per_frame_17=q7=(q1+q2+q3)*5;
per_frame_18=q8=(q1+q2+q3)*5;
per_frame_19=q9=(q1+q2+q3)*5;
per_frame_20=q10=(q1+q2+q3)*5;
per_frame_21=q11=(q1+q2+q3)*5;
per_frame_22=q12=(q1+q2+q3)*5;
per_frame_23=q13=(q1+q2+q3)*5;
per_frame_24=q14=(q1+q2+q3)*5;
per_frame_25=q15=(q1+q2+q3)*5;
per_frame_26=q16=(q1+q2+q3)*5;
per_frame_27=q17=(q1+q2+q3)*5;
per_frame_28=q18=(q1+q2+q3)*5;
per_frame_29=q19=(q1+q2+q3)*5;
per_frame_30=q20=(q1+q2+q3)*5;
per_frame_31=q21=(q1+q2+q3)*5;
per_frame_32=q22=(q1+q2+q3)*5;
per_frame_33=q23=(q1+q2+q3)*5;
per_frame_34=q24=(q1+q2+q3)*5;
per_frame_35=q25=(q1+q2+q3)*5;
per_frame_36=q26=(q1+q2+q3)*5;
per_frame_37=q27=(q1+q2+q3)*5;
per_frame_38=q28=(q1+q2+q3)*5;
per_frame_39=q29=(q1+q2+q3)*5;
per_frame_40=q30=(q1+q2+q3)*5;
per_frame_41=q31=(q1+q2+q3)*5;
per_frame_42=q32=(q1+q2+q3)*5;
per_frame_43=
per_frame_44=q1 = aspectX;
per_frame_45=q2 = aspectY;
per_frame_46=w1 = asin(1)*0.7;
per_frame_47=w2 = asin(1)*1.3;
per_frame_48=q5 = sin(w1);
per_frame_49=q6 = cos(w1);
per_frame_50=q7 = sin(w2);
per_frame_51=q8 = cos(w2);
per_frame_52=w1 = asin(1)*0.7;
per_frame_53=w2 = asin(1)*1.3;
per_frame_54=q9 = sin(w1);
per_frame_55=q10 = cos(w1);
per_frame_56=q11 = sin(w2);
per_frame_57=q12 = cos(w2);
per_frame_58=zoom = 0.999;
per_frame_59=//wave_a = 0;
per_frame_60=q30=(bass+treb+mid)*2.3;
per_frame_61=q3=q30*3;
warp_1=`
warp_2=`//Shader from https://x.com/YoheiNishitsuji/status/1946193239486431531
warp_3=`//Ported to MilkDrop by MilkDrop2077
warp_4=`
warp_5=`// HSV to RGB conversion
warp_6=`float3 hsv(float h, float s, float v) {
warp_7=`    float4 K = float4(1.0, 2.0/3.0, 1.0/3.0, 3.0);
warp_8=`    float3 p = abs(frac(h + K.xyz) * 6.0 - K.www);
warp_9=`    return v * lerp(K.xxx, saturate(p - K.xxx), s);
warp_10=`}
warp_11=`
warp_12=`// 3D rotation matrix
warp_13=`float3x3 rotate3D(float angle, float3 axis) {
warp_14=`    axis = normalize(axis);
warp_15=`    float s = sin(angle);
warp_16=`    float c = cos(angle);
warp_17=`    float oc = 1.0 - c;
warp_18=`    return float3x3(
warp_19=`        oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s,
warp_20=`        oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s,
warp_21=`        oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c
warp_22=`    );
warp_23=`}
warp_24=`shader_body{
warp_25=`    // Calculate aspect ratio correction
warp_26=`    float aspect = aspect.x / aspect.y;
warp_27=`
warp_28=`uv = (uv_orig - 0.5) * float2(aspect, 1.0);
warp_29=`//uv.x *= 0.8;  // Compress horizontally
warp_30=`float t = time;
warp_31=`float3 o = float3(0.0, 0.0, 0.0);  // Output color
warp_32=`float g = 0.0;  // Ray position
warp_33=`float e = 0.0;  // Scale factor
warp_34=`float s = 0.0;  // Distance field
warp_35=`
warp_36=`for(float i = 0.0; i < 99.0; i++) {
warp_37=`    e = 2.0;
warp_38=`    float3 p = mul(float3(uv * g * 3.0, g), rotate3D(t * 0.5 - 8.0, float3(2.0 + sin(t * 0.5) * 2.0, 1.0, 1.0)));
warp_39=`    p.z = fmod(t * 0.5+q23 / 1.047 + p.z, e) - e;
warp_40=`    p.x += 0.6;
warp_41=`
warp_42=`    for(int j = 0; j < 21; j++) {
warp_43=`        p = abs(p.zyx) - 1.0;
warp_44=`        s = dot(p, p);
warp_45=`        e /= s;
warp_46=`        p /= s + 0.03;
warp_47=`    }
warp_48=`
warp_49=`    g -= p.z / e * 0.5 + 0.002;
warp_50=`    o += 1e-5 + hsv(p.y, p.y * 5.0 + s, 3.0) * 9e-6 * e / s / s;
warp_51=`}
warp_52=`
warp_53=`ret = float4(o, 1.0);
warp_54=`}
comp_1=`sampler sampler_fw_clouds;  // loads clouds.jpg (or .tga, etc)
comp_2=`
comp_3=`shader_body         
comp_4=`{
comp_5=`    ret = tex2D(sampler_main, uv).xyz +
comp_6=`              GetBlur2(uv)
comp_7=`          ;
comp_8=`
comp_9=`    ret = tex2D( sampler_fw_clouds, 
comp_10=`                     ret.xy*(0.1 + 0.7*rand_preset.x*rand_preset.y) 
comp_11=`                     + uv*float2(1,-1)*aspect.xy
comp_12=`                   ).xyz;
comp_13=`
comp_14=`    //ret *= 1.333; // a little bit of overbright
comp_15=`
comp_16=`}
comp_17=`
