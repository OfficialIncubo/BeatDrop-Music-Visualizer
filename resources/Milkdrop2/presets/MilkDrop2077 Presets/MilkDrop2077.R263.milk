MILKDROP_PRESET_VERSION=201
PSVERSION=2
PSVERSION_WARP=2
PSVERSION_COMP=2
[preset00]
fRating=4.000
fGammaAdj=1.000
fDecay=0.960
fVideoEchoZoom=1.007
fVideoEchoAlpha=0.000
nVideoEchoOrientation=1
nWaveMode=0
bAdditiveWaves=1
bWaveDots=0
bWaveThick=1
bModWaveAlphaByVolume=1
bMaximizeWaveColor=1
bTexWrap=0
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=0.107
fWaveScale=1.119
fWaveSmoothing=0.000
fWaveParam=0.000
fModWaveAlphaStart=1.200
fModWaveAlphaEnd=1.200
fWarpAnimSpeed=1.000
fWarpScale=1.000
fZoomExponent=0.88020
fShader=0.000
zoom=0.99980
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=0.99990
sy=0.99980
wave_r=0.000
wave_g=0.930
wave_b=1.000
wave_x=0.500
wave_y=0.500
ob_size=0.000
ob_r=0.000
ob_g=0.000
ob_b=0.000
ob_a=0.050
ib_size=0.005
ib_r=0.000
ib_g=0.000
ib_b=0.000
ib_a=1.000
nMotionVectorsX=64.000
nMotionVectorsY=48.000
mv_dx=0.000
mv_dy=0.000
mv_l=0.850
mv_r=0.500
mv_g=0.500
mv_b=0.500
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.250
wavecode_0_enabled=0
wavecode_0_samples=512
wavecode_0_sep=0
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=0
wavecode_0_bDrawThick=1
wavecode_0_bAdditive=1
wavecode_0_scaling=1.00000
wavecode_0_smoothing=0.50000
wavecode_0_r=0.000
wavecode_0_g=1.000
wavecode_0_b=1.000
wavecode_0_a=1.000
wave_0_per_frame1=q1 = below(int(rand(100)),4 + 10*(treb+mid+bass));
wave_0_per_point1=it = (it + 1)*above(sample,0)*below(it,53);
wave_0_per_point2=ita = (ita + equal(it,0))*above(sample,0);
wave_0_per_point3=
wave_0_per_point4=sw = 1-equal(it,0)*equal(ita,0);
wave_0_per_point5=swi = (equal(lr,9) + equal(lr,5))*equal(it,0)*equal(ita,4);
wave_0_per_point6=xv = if(sw - swi,xv,int(rand(1001))*.001*.8);
wave_0_per_point7=mx = xv + ita*.025;
wave_0_per_point8=my = if(sw - swi,my,int(rand(1001))*.001*.975);
wave_0_per_point9=
wave_0_per_point10=sz = .01;
wave_0_per_point11=vx = above(it,1)*below(it,39) + above(it,12)*below(it,28) - equal(it,20) + equal(it,46) + equal(it,51) + equal(it,41) - equal(it,15) - equal(it,25) + equal(it,10) + equal(it,30) - equal(it,4) - equal(it,36);
wave_0_per_point12=vy = above(it,17)*below(it,49) + above(it,22)*below(it,44) - equal(it,33) + equal(it,7) + equal(it,51) + equal(it,15) - equal(it,41) - equal(it,25) + equal(it,4) + equal(it,10) - equal(it,36) - equal(it,30);
wave_0_per_point13=
wave_0_per_point14=sa = equal(ita,0)*13 + equal(ita,1)*9 + equal(ita,2)*12 + equal(ita,3)*11 + equal(ita,4)*4 + equal(ita,5)*18 + equal(ita,6)*15 + equal(ita,7)*16;
wave_0_per_point15=sb = equal(ita,0)*11 + equal(ita,1)*9 + equal(ita,2)*12 + equal(ita,3)*12;
wave_0_per_point16=sc = equal(ita,0)*4 + equal(ita,1)*15 + equal(ita,3)*4 + equal(ita,4)*18 + equal(ita,5)*21 + equal(ita,6)*7 + equal(ita,7)*19;
wave_0_per_point17=sd = equal(ita,0)*12 + equal(ita,1)*15 + equal(ita,2)*22 + equal(ita,3)*5;
wave_0_per_point18=se = equal(ita,0)*8 + equal(ita,1)*1 + equal(ita,2)*20 + equal(ita,3)*5;
wave_0_per_point19=sf = equal(ita,0)*6 + equal(ita,1)*5 + equal(ita,2)*1 + equal(ita,3)*18 + equal(ita,5)*10 + equal(ita,6)*15 + equal(ita,7)*25;
wave_0_per_point20=sg = equal(ita,0)*1 + equal(ita,1)*14 + equal(ita,2)*7 + equal(ita,3)*5 + equal(ita,4)*18;
wave_0_per_point21=sh = equal(ita,0)*19 + equal(ita,1)*21 + equal(ita,2)*18 + equal(ita,3)*16 + equal(ita,4)*18 + equal(ita,5)*9 + equal(ita,6)*19 + equal(ita,7)*5;
wave_0_per_point22=si = equal(ita,0)*8 + equal(ita,1)*1 + equal(ita,2)*16 + equal(ita,3)*16 + equal(ita,4)*25;
wave_0_per_point23=sj = equal(ita,0)*25 + equal(ita,1)*5 + equal(ita,2)*19 + equal(ita,6)*14 + equal(ita,7)*15;
wave_0_per_point24=
wave_0_per_point25=lr = if(sw,lr,int(rand(10)));
wave_0_per_point26=let = equal(lr,0)*sa + equal(lr,1)*sb + equal(lr,2)*sc + equal(lr,3)*sd + equal(lr,4)*se + equal(lr,5)*sf + equal(lr,6)*sg + equal(lr,7)*sh + equal(lr,8)*si + equal(lr,9)*sj;
wave_0_per_point27=
wave_0_per_point28=va = equal(let,23) + equal(let,24) + equal(let,26);
wave_0_per_point29=vb = above(let,0)*below(let,9) + above(let,10)*below(let,19) + equal(let,21) + equal(let,23);
wave_0_per_point30=vc = equal(let,1) + equal(let,2) + equal(let,5) + equal(let,6) + equal(let,8) + equal(let,11) + equal(let,16) + equal(let,18) + equal(let,19);
wave_0_per_point31=vd = above(let,1)*below(let,9) + above(let,10)*below(let,24) - equal(let,20);
wave_0_per_point32=ve = equal(let,13) + equal(let,14) + equal(let,24) + equal(let,25);
wave_0_per_point33=vf = above(let,1)*below(let,8) + equal(let,9) + above(let,14)*below(let,21) + equal(let,26);
wave_0_per_point34=vg = equal(let,1);
wave_0_per_point35=vh = equal(let,9) + equal(let,20);
wave_0_per_point36=vi = above(let,0)*below(let,5) - equal(let,3) + equal(let,18);
wave_0_per_point37=vj = above(let,2)*below(let,8) - equal(let,4) + equal(let,9) + above(let,14)*below(let,21) - equal(let,18) + equal(let,26);
wave_0_per_point38=vk = equal(let,11) + equal(let,13) + above(let,23)*below(let,27);
wave_0_per_point39=vl = equal(let,8) + equal(let,10) + above(let,12)*below(let,18) + above(let,20)*below(let,24);
wave_0_per_point40=vm = equal(let,1) + equal(let,2) + equal(let,8) + equal(let,16) + equal(let,18) + equal(let,19);
wave_0_per_point41=vn = equal(let,1) + equal(let,7) + equal(let,8) + equal(let,10) + above(let,12)*below(let,24) - equal(let,16) - equal(let,18) - equal(let,20) - equal(let,22);
wave_0_per_point42=vo = equal(let,11) + equal(let,14) + equal(let,17) + equal(let,18) + equal(let,23) + equal(let,24);
wave_0_per_point43=vp = equal(let,3) + equal(let,5) + equal(let,7) + equal(let,9) + equal(let,10) + equal(let,12) + equal(let,15) + equal(let,17) + equal(let,19) + equal(let,21) + equal(let,26);
wave_0_per_point44=vq = equal(let,2) + equal(let,4) + equal(let,22);
wave_0_per_point45=vr = equal(let,9) + equal(let,20) + equal(let,25);
wave_0_per_point46=vs = equal(let,22);
wave_0_per_point47=vt = above(let,1)*below(let,13) - equal(let,6) - equal(let,8) - equal(let,11) + equal(let,15) + equal(let,17) + equal(let,19) + equal(let,21) + equal(let,26);
wave_0_per_point48=
wave_0_per_point49=a = if(above(it,51),0,if(above(it,49),va,if(above(it,47),vb,if(above(it,44),vc,if(above(it,42),vd,if(above(it,39),ve, if(above(it,37),vf,if(above(it,34),vg,if(above(it,31),vh,if(above(it,28),vi,if(above(it,26),vj,if(above(it,23),vk, if(above(it,21),vl,if(above(it,18),vm,if(above(it,16),vn,if(above(it,13),vo,if(above(it,11),vp,if(above(it,8),vq, if(above(it,5),vr,if(above(it,2),vs,if(it,vt,0)))))))))))))))))))));
wave_0_per_point50=
wave_0_per_point51=a = a*below(ita,8)*q1;
wave_0_per_point52=
wave_0_per_point53=x = mx + vx*sz*.75;
wave_0_per_point54=y = my + vy*sz*1.5;
wavecode_1_enabled=0
wavecode_1_samples=512
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=0
wavecode_1_bDrawThick=0
wavecode_1_bAdditive=0
wavecode_1_scaling=1.00000
wavecode_1_smoothing=0.50000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=1.000
wavecode_2_enabled=0
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=0
wavecode_2_bAdditive=0
wavecode_2_scaling=1.00000
wavecode_2_smoothing=0.50000
wavecode_2_r=1.000
wavecode_2_g=1.000
wavecode_2_b=1.000
wavecode_2_a=1.000
wavecode_3_enabled=0
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=0
wavecode_3_bUseDots=0
wavecode_3_bDrawThick=0
wavecode_3_bAdditive=0
wavecode_3_scaling=1.00000
wavecode_3_smoothing=0.50000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=1.000
shapecode_0_enabled=1
shapecode_0_sides=24
shapecode_0_additive=1
shapecode_0_thickOutline=0
shapecode_0_textured=0
shapecode_0_num_inst=8
shapecode_0_x=0.480
shapecode_0_y=0.500
shapecode_0_rad=0.02610
shapecode_0_ang=0.00000
shapecode_0_tex_ang=0.00000
shapecode_0_tex_zoom=4.36077
shapecode_0_r=1.000
shapecode_0_g=0.000
shapecode_0_b=0.000
shapecode_0_a=1.000
shapecode_0_r2=1.000
shapecode_0_g2=0.000
shapecode_0_b2=0.000
shapecode_0_a2=1.000
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=1.000
shapecode_0_border_a=0.000
shape_0_per_frame1=x = int(rand(1000))/1000;
shape_0_per_frame2=y = int(rand(1000))/1000;
shape_0_per_frame3=ang = int(rand(150))/100;
shapecode_1_enabled=0
shapecode_1_sides=5
shapecode_1_additive=0
shapecode_1_thickOutline=0
shapecode_1_textured=1
shapecode_1_num_inst=1
shapecode_1_x=0.500
shapecode_1_y=0.500
shapecode_1_rad=0.98600
shapecode_1_ang=0.00000
shapecode_1_tex_ang=3.14159
shapecode_1_tex_zoom=0.99979
shapecode_1_r=1.000
shapecode_1_g=1.000
shapecode_1_b=1.000
shapecode_1_a=1.000
shapecode_1_r2=1.000
shapecode_1_g2=1.000
shapecode_1_b2=1.000
shapecode_1_a2=1.000
shapecode_1_border_r=1.000
shapecode_1_border_g=1.000
shapecode_1_border_b=1.000
shapecode_1_border_a=0.000
shape_1_per_frame1=ang =sin(time/65) ;// ang + (bass*.2) + (time*.4);
shapecode_2_enabled=0
shapecode_2_sides=100
shapecode_2_additive=0
shapecode_2_thickOutline=0
shapecode_2_textured=1
shapecode_2_num_inst=1
shapecode_2_x=0.900
shapecode_2_y=0.500
shapecode_2_rad=0.10000
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=1.00000
shapecode_2_r=1.000
shapecode_2_g=1.000
shapecode_2_b=1.000
shapecode_2_a=1.000
shapecode_2_r2=1.000
shapecode_2_g2=1.000
shapecode_2_b2=1.000
shapecode_2_a2=1.000
shapecode_2_border_r=1.000
shapecode_2_border_g=1.000
shapecode_2_border_b=1.000
shapecode_2_border_a=0.100
shape_2_per_frame1=x = sin(time) * .4 + .5;
shape_2_per_frame2=
shape_2_per_frame3=
shape_2_per_frame4=pow( (bass*.15),2);
shapecode_3_enabled=0
shapecode_3_sides=36
shapecode_3_additive=1
shapecode_3_thickOutline=0
shapecode_3_textured=0
shapecode_3_num_inst=1
shapecode_3_x=0.500
shapecode_3_y=0.500
shapecode_3_rad=0.16777
shapecode_3_ang=0.00000
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=1.00000
shapecode_3_r=0.000
shapecode_3_g=0.100
shapecode_3_b=0.000
shapecode_3_a=1.000
shapecode_3_r2=0.000
shapecode_3_g2=0.000
shapecode_3_b2=0.000
shapecode_3_a2=0.000
shapecode_3_border_r=1.000
shapecode_3_border_g=1.000
shapecode_3_border_b=1.000
shapecode_3_border_a=0.000
per_frame_init_1=hshift=0;hshift2=0;
per_frame_init_2=evol=0;
per_frame_init_3=beatfade=0;
per_frame_init_4=next=0
per_frame_1=evol=(bass+mid+treb)*0.3;
per_frame_2=evol=evol*evol;
per_frame_3=
per_frame_4=hshift= sin(time*0.3)*3.5 - 2.5;
per_frame_5=hshift= pow( max(hshift,0) , 2 );
per_frame_6=hshift2= -sin(time*0.3)*3.5 - 2.5;
per_frame_7=hshift2= pow( max(hshift2,0) , 2 );
per_frame_8=dx= (hshift - hshift2)*0.03*evol;
per_frame_9=
per_frame_10=vshift= sin(time*0.5)*3.5 - 2.5;
per_frame_11=vshift= pow( max(vshift,0) , 2 );
per_frame_12=vshift2= -sin(time*0.5)*3.5 - 2.5;
per_frame_13=vshift2= pow( max(vshift2,0) , 2 );
per_frame_14=dy= (vshift - vshift2)*0.03*evol;
per_frame_15=
per_frame_16=
per_frame_17=// -------------------------------- Beat Detective v0.07 ----------------------------------
per_frame_18=sure=if(equal(sure,0),.6,sure);
per_frame_19=interval=if(equal(interval,0),40,interval);
per_frame_20=lastbeat=if(equal(lastbeat,0),frame-FPS,lastbeat);
per_frame_21=dbass=(bass-pbass)/FPS;
per_frame_22=beat=above(dbass,.6*maxdbass)*above(frame-lastbeat,FPS/3);
per_frame_23=sure=if(beat*below(abs(frame-(interval+lastbeat)),FPS/5),
per_frame_24=min(.095+sure,1),beat*(sure-.095)+(1-beat)*sure*.9996);
per_frame_25=sure=max(.5,sure);
per_frame_26=cheat=if(above(frame,lastbeat+interval+ int(FPS/10))*above(sure,.91),1,cheat);
per_frame_27=beat=if(cheat,1,beat);
per_frame_28=sure=if(cheat,.95*sure,sure);
per_frame_29=maxdbass=max(maxdbass*.999,dbass);
per_frame_30=maxdbass=max(.012,maxdbass);
per_frame_31=maxdbass=min(.02,maxdbass);
per_frame_32=interval=if(beat, frame-lastbeat,interval);
per_frame_33=lastbeat=if(beat,frame-cheat*int(FPS/10),lastbeat);
per_frame_34=cheat=0;
per_frame_35=pbass=bass;
per_frame_36=// ----------------------------------------------------------------------------------------------
per_frame_37=warp=0;
per_frame_38=zoom=1;
per_frame_39=temp=(time/6.2831-int(time/6.2831));
per_frame_40=q7=abs(temp*6.2831-3.1415)/3.1415;
per_frame_41=q8=beat;
per_frame_42=
per_frame_43=// this echoes the value of the "beat" variable for one more frame after a beat so that both "sparks" are drawn highlighted (on consecutive frames)
per_frame_44=q8=q8+equal(frame-lastbeat,1);
per_frame_45=
per_frame_46=orient = if(alpha,orient,int(rand(3))+1);
per_frame_47=echo_orient = orient;
per_frame_48=
per_frame_49=// ------------------ Indecision Code ----------------------
per_frame_50=// xpos and ypos are calculated as springs being acted on by a variable force, comprised of vol and bass_att or treb_att.
per_frame_51=vol = 0.167*(bass+mid);
per_frame_52=xamptarg = if(equal(frame%15,0),min(0.5*vol*bass_att,0.5),xamptarg);
per_frame_53=xamp = xamp + 0.5*(xamptarg-xamp);
per_frame_54=xdir = if(above(abs(xpos),xamp),-sign(xpos),if(below(abs(xspeed),0.1),2*above(xpos,0)-1,xdir));
per_frame_55=xspeed = xspeed + xdir*xamp - xpos - xspeed*0.1*below(abs(xpos),xamp);
per_frame_56=xpos = xpos + 0.001*xspeed;
per_frame_57=yamptarg = if(equal(frame%15,0),min(0.3*vol*treb_att,0.5),yamptarg);
per_frame_58=yamp = yamp + 0.5*(yamptarg-yamp);
per_frame_59=ydir = if(above(abs(ypos),yamp),-sign(ypos),if(below(abs(yspeed),0.1),2*above(ypos,0)-1,ydir));
per_frame_60=yspeed = yspeed + ydir*yamp - ypos - yspeed*0.1*below(abs(ypos),yamp);
per_frame_61=ypos = ypos + 0.001*yspeed;
per_frame_62=// ---------------------------------------------------------
per_frame_63=
per_frame_64=q1 = xpos;
per_frame_65=q2 = ypos;
per_frame_66=
per_frame_67=ob_g = max(min(0.5*(sin(1.345*time)+sin(0.987*time))+0.2,0.4),0);
per_frame_68=ob_b = max(min(0.5*(sin(1.543*time)+sin(0.789*time))+0.2,0.4),0);
per_frame_69=ob_r = max(min(0.5*(sin(0.876*time)+sin(0.543*time))+0.1,0.2),0);
per_frame_70=//ib_g = max(min(0.5*(sin(1.246*time)+sin(0.864*time))+0.2,0.4),0);
per_frame_71=//ib_b = max(min(0.5*(sin(1.642*time)+sin(0.468*time))+0.2,0.4),0);
per_frame_72=//ib_r = max(min(0.5*(sin(0.765*time)+sin(0.654*time))+0.1,0.2),0);
per_frame_73=
per_frame_74=basschange = 0.1*basschange+0.01*bass;
per_frame_75=midchange = 0.1*midchange+0.01*mid;
per_frame_76=trebchange = 0.1*trebchange+0.01*treb;
per_frame_77=
per_frame_78=basstime = basstime + basschange;
per_frame_79=midtime = midtime + midchange;
per_frame_80=trebtime = trebtime + trebchange;
per_frame_81=
per_frame_82=
per_frame_83=
per_frame_84=beatfade = if( beat, 1 , beatfade);
per_frame_85=beatfade=beatfade-0.02;
per_frame_86=beatfade=max(beatfade,0);
per_frame_87=
per_frame_88=next= if( beat , next+1 , next);
per_frame_89=next= if( above(next,2) , 0 , next );
per_frame_90=
per_frame_91=q3 = beatfade * equal(next,0);
per_frame_92=q4 = beatfade * equal(next,1);
per_frame_93=q5 = beatfade * equal(next,2);
per_frame_94=
per_frame_95=
per_frame_96=q6 = frame%2;
per_frame_97=
per_frame_98=monitor=next
per_pixel_1=cx=0.5+q1;
per_pixel_2=cy=0.5-q2;
per_pixel_3=rd=sqrt( sqr( (x-0.5-q1)*2) + sqr( (y-0.5+q2)*1.5 ) );
per_pixel_4=//zm=(1.1-(rd/4));
per_pixel_5=//sx=zm;
per_pixel_6=//sy=zm;
per_pixel_7=//rot=above(rd,0.7)*(rd-0.7)*sin(time*0.3);
per_pixel_8=
per_pixel_9=
per_pixel_10=zoom=1.01+(rd/10000);
per_pixel_11=rot=rd/40 ;
per_pixel_12=
per_pixel_13=hedge=if (above(x,0.5) , x , 1-x)*2;
per_pixel_14=hedge=1- pow(1-hedge,2);
per_pixel_15=vedge=if (above(y,0.5) , y , 1-y)*2;
per_pixel_16=vedge=1- pow(1-vedge,2);
per_pixel_17=dx=dx;
per_pixel_18=dy=dy;
per_pixel_19=
per_pixel_20=
per_pixel_21=thresh = above(bass_att,thresh)*2+(1-above(bass_att,thresh))*((thresh-1.3)*0.96+1.3);
per_pixel_22=dx_r = equal(thresh,2)*0.015*sin(5*time)+(1-equal(thresh,2))*dx_r;
per_pixel_23=dy_r = equal(thresh,2)*0.015*sin(6*time)+(1-equal(thresh,2))*dy_r;
per_pixel_24=zoom = zoom + 0.01;
per_pixel_25=zoom = zoom + (0.05 + 0.04*sin(time))*(0.2*sin(ang*time));
per_pixel_26=rot = rot + 0.01*(0.5*cos(ang*5*bass*time));
per_pixel_27=
per_pixel_28=dx = dx + 0.1*above(rad,0.25)*dx_r;
per_pixel_29=dy = dy + 0.1*above(rad,0.25)*dy_r;
per_pixel_30=num = 8;
per_pixel_31=pi = 3.141592654;
per_pixel_32=radi = (y-.5)*.75;
per_pixel_33=radi = (y-.5);
per_pixel_34=radi = pow(radi*radi + (x-.5)*(x-.5),.5);
per_pixel_35=
per_pixel_36=an = ang + pi + time;
per_pixel_37=an = an - pi*2*int(an/(pi*2));
per_pixel_38=
per_pixel_39=mod = .1;
per_pixel_40=
per_pixel_41=seg = ang + pi;
per_pixel_42=seg = seg/(pi*2)*num;
per_pixel_43=seg = int(seg);
per_pixel_44=seg = seg - equal(seg,num);
per_pixel_45=
per_pixel_46=anga = (ang + pi) - (pi*2/num)*seg;
per_pixel_47=anga = if(equal(seg%2,0),(pi*2/num) - anga,anga);
per_pixel_48=//anga = anga + pi/6; // num = 6
per_pixel_49=anga = anga + pi/4; // num = 8
per_pixel_50=//anga = anga + .85; // num = 10
per_pixel_51=
per_pixel_52=
per_pixel_53=ox = .5 - radi*sin(anga);
per_pixel_54=oy = .5 + radi*cos(anga);
per_pixel_55=
per_pixel_56=//rot = if(equal(seg,0),rot,0);
per_pixel_57=
per_pixel_58=dx = equal(seg,3)*(x-ox);
per_pixel_59=dy = equal(seg,3)*(y-oy);
per_pixel_60=
per_pixel_61=dx = above(seg,0)*(x-ox);
per_pixel_62=dy = above(seg,0)*(y-oy);
per_pixel_63=
per_pixel_64=//dx = equal(seg,1)*(x - .5)*2;
warp_1=`shader_body
warp_2=`{
warp_3=`    float2 scale = float2(1280,1024)*texsize.zw; // 1280x1024 : the resolution i modelled this shader with
warp_4=`    float1 d = 0.005;
warp_5=`    float1 dx = ( GetBlur2(uv + float2(d,0)) - GetBlur2(uv-float2(d,0)) ).x*scale.x;
warp_6=`    float1 dy = ( GetBlur2(uv + float2(0,d)) - GetBlur2(uv-float2(0,d)) ).x*scale.y;
warp_7=`    float1 dxb = ( GetBlur2(uv + float2(d,0)) - GetBlur2(uv-float2(d,0)) ).x*scale.x;
warp_8=`    float1 dyb = ( GetBlur2(uv + float2(0,d)) - GetBlur2(uv-float2(0,d)) ).x*scale.y;
warp_9=`    float2 my_uv = uv - float2(dx,dy)*0.01 + float2(dxb,dyb)*0.003;
warp_10=`
warp_11=`
warp_12=`
warp_13=`    float2 v = 0.01;
warp_14=`    ret.x = tex2D( sampler_fw_main, my_uv -floor(my_uv)*0).x;
warp_15=`
warp_16=`    
warp_17=`    ret.x += (ret.x - GetBlur3(uv).x)*.1;
warp_18=`    ret.x -= 0.01;
warp_19=`
warp_20=`
warp_21=`//--------------------------------
warp_22=`
warp_23=`    my_uv = uv + float2(dy,-dx)*0.05*(1.2-GetBlur3(uv).y);
warp_24=`
warp_25=`
warp_26=`
warp_27=`    v = 0.01;
warp_28=`    ret.z = tex2D( sampler_fw_main, my_uv).z;
warp_29=`    
warp_30=`    ret.z += (ret.z - GetBlur1(uv).z)*length(my_uv-uv)*180/length(scale);
warp_31=`    ret.z *= 0.8;
warp_32=`    ret.z -= 0.01;
warp_33=`
warp_34=`
warp_35=`
warp_36=`//--------------------------------
warp_37=`
warp_38=`    d = 0.01;
warp_39=`    my_uv = float2(-dy,dx)*0.045;
warp_40=`
warp_41=`    dx = ( GetBlur2(uv + float2(d,0)) - GetBlur2(uv-float2(d,0)) ).y*scale.x;
warp_42=`    dy = ( GetBlur2(uv + float2(0,d)) - GetBlur2(uv-float2(0,d)) ).y*scale.y;
warp_43=`    my_uv += uv - float2(dx,dy)*0.03;
warp_44=`    v = 0.01;
warp_45=`    ret.y =tex2D( sampler_fw_main, my_uv).y;
warp_46=`    ret.y += (ret.y - GetBlur3(my_uv).y)*0.1 - 0.01;
warp_47=`    
warp_48=`    
warp_49=`
warp_50=`    
warp_51=`    
warp_52=`//ret = 0;
warp_53=`}
comp_1=`sampler sampler_seaweed;
comp_2=`shader_body
comp_3=`{
comp_4=`    float rad_lq = rad * length(texsize.xy)*0.5;
comp_5=`    float ang_lq = ang;
comp_6=`    float2 uv_temp1 = (uv - 0.5) * texsize.xy;
comp_7=`    float rad_hq = length(uv_temp1);
comp_8=`    float ang_hq = atan2(-uv_temp1.y, uv_temp1.x);
comp_9=`
comp_10=`    float2 uv2 = (uv - 0.5);
comp_11=`    float rad2 = rad_lq*0.8;
comp_12=`    float ang2 = ang_lq * M_INV_PI_2 + rad_lq*0.000 + time*0.00;
comp_13=`
comp_14=`
comp_15=`        // FIN TYPE
comp_16=`        float fins = 6;
comp_17=`        ang2 = frac(ang2*fins)/fins;
comp_18=`              // ENABLE THIS TO MAKE THE FINS ALTERNATE: (seamless!)
comp_19=`              ang2 = abs(ang2 - 0.5/fins);
comp_20=`
comp_21=`
comp_22=`    ang2 *= M_PI_2;
comp_23=`//    uv = 0.5 + rad2*float2(cos(ang2),sin(ang2))*texsize.zw;
comp_24=`
comp_25=`    ret = 1.4*pow(saturate(GetBlur1(uv))*((tex2D(sampler_pc_main,uv)-GetBlur3(uv))),0.5); //invert
comp_26=`    //uv.y = rad*rad;
comp_27=`//    float srad = sqrt(rad)+ 0.05;
comp_28=`
comp_29=`//    ret = tex2D(sampler_main, uv).xyz;
comp_30=`//    ret = max(ret, tex2D(sampler_main, uv + 0.03*float2(cos(uv.y*27),sin(uv.x*39))).xyz);
comp_31=`
comp_32=`    //ret += GetBlur1(uv) - 0.07;
comp_33=`    //ret *= float3(1.3,0.8,0.5);
comp_34=`    //ret *= 0.8;    
comp_35=`ret = float3(0.9,0.5,0)*ret.z + float3(0.4,0,0.8)*ret.y;
comp_36=`}
