MILKDROP_PRESET_VERSION=201
PSVERSION=4
PSVERSION_WARP=3
PSVERSION_COMP=4
[preset00]
fRating=4.000
fGammaAdj=1.980
fDecay=0.500
fVideoEchoZoom=1.000
fVideoEchoAlpha=0.500
nVideoEchoOrientation=3
nWaveMode=4
bAdditiveWaves=1
bWaveDots=1
bWaveThick=1
bModWaveAlphaByVolume=1
bMaximizeWaveColor=0
bTexWrap=1
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=0.001
fWaveScale=0.527
fWaveSmoothing=0.450
fWaveParam=0.000
fModWaveAlphaStart=0.000
fModWaveAlphaEnd=1.320
fWarpAnimSpeed=1.459
fWarpScale=2.007
fZoomExponent=1.00000
fShader=0.000
zoom=0.99990
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=0.99990
sy=1.00000
wave_r=0.800
wave_g=0.490
wave_b=1.000
wave_x=0.500
wave_y=0.500
ob_size=0.000
ob_r=1.000
ob_g=0.000
ob_b=0.000
ob_a=1.000
ib_size=0.260
ib_r=0.250
ib_g=0.250
ib_b=0.250
ib_a=0.000
nMotionVectorsX=64.000
nMotionVectorsY=48.000
mv_dx=0.000
mv_dy=0.000
mv_l=1.850
mv_r=0.500
mv_g=0.500
mv_b=0.500
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=0.300
b3x=1.000
b1ed=0.000
wavecode_0_enabled=1
wavecode_0_samples=282
wavecode_0_sep=20
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=0
wavecode_0_bDrawThick=0
wavecode_0_bAdditive=1
wavecode_0_scaling=7.85800
wavecode_0_smoothing=0.10000
wavecode_0_r=0.200
wavecode_0_g=0.300
wavecode_0_b=1.000
wavecode_0_a=0.250
wave_0_per_point1=
wave_0_per_point2=x = .2+sample/2; y = 0.5;
wave_0_per_point3=
wave_0_per_point4=r = .5 + .2*sin((time*1.40)/17);
wave_0_per_point5=g = .5 + .2*sin((time*1.40)/23);
wave_0_per_point6=b = .5 + .2*sin((time*1.40)/11);
per_frame_init_1=i=0; loop (5000,i[0]=0; gmem[i]=0; i+=1;);
per_frame_init_2=octaves=3; minbpm=75; maxbpm=200; nres_oct=60; 
per_frame_init_3=nres_extra=nres_oct/log(2)*log(maxbpm/minbpm/2);
per_frame_init_4=nres=nres_oct*octaves+nres_extra;
per_frame_init_5=bstep = log(2)/nres_oct;
per_frame_init_6=nres_out = ceil(nres_oct+nres_extra); //int is necessary !
per_frame_init_7=
per_frame_init_8=maxind = 40;
per_frame_init_9=i=0;
per_frame_init_10=loop (nres,
per_frame_init_11= //precalculate BPM
per_frame_init_12=  (8*i)[3]=minbpm*exp(i*bstep); 
per_frame_init_13= //precalculate weighting
per_frame_init_14=  if (i<=nres_out,(8*i)[4]=min(2,1+sin($pi*i/nres_out)*3)/2,0);; 
per_frame_init_15=i+=1); 
per_frame_init_16=
per_frame_init_17=tmov = 1333; start = 0.0; speed=0.1;
per_frame_init_18=
per_frame_init_19=
per_frame_1=//Martin/Nitorami - DFT based BPM identification
per_frame_2=dec_m=exp(-2*dt);
per_frame_3=vol=2*bass_att+mid_att+treb_att;
per_frame_4=vol_ = vol_*dec_m + vol*(1-dec_m);
per_frame_5=
per_frame_6=dt=1/fps; 
per_frame_7=tcorr = (dt - dt_);
per_frame_8=dt_= dt;
per_frame_9=treal += dt + tcorr*38;
per_frame_10=exc=vol;
per_frame_11=d0= exp(-1.5*dt);
per_frame_12=i=0; avg = 0;
per_frame_13=loop (nres,
per_frame_14=  n = 8*i;
per_frame_15=  w = 2*$pi/60*n[3];
per_frame_16=  d = 1-dt*w*0.013; 
per_frame_17=  arg = treal*w + tcorr*15000;
per_frame_18=  n[1] = n[1]*d +exc*cos(arg)*(1-d); 
per_frame_19=  n[2] = n[2]*d +exc*sin(arg)*(1-d); 
per_frame_20=  if (i<nres_out, 
per_frame_21=    n2 = 8*(i+nres_oct);
per_frame_22=    n4 = 8*(i+nres_oct*2);
per_frame_23=    sum = sqrt (sqr(n[1])+sqr(n[2]) + sqr(n2[1])+sqr(n2[2]) + sqr(n4[1])+sqr(n4[2]));
per_frame_24=    avg += sum;
per_frame_25=    n[0]= n[0]*d0+sum*(1-d0)*n[4];
per_frame_26=    if (n[0]>(8*promax)[0], promax=max(2,min(nres_out-2,i));,0); 
per_frame_27=  ,0);
per_frame_28=i += 1;);
per_frame_29=avg_ = avg_*d0 + (1-d0)*avg/nres_out;
per_frame_30=
per_frame_31=m8 = 8*maxind;
per_frame_32=wait += abs(m8[0]-(8*promax)[0])*dt*100; 
per_frame_33=if (wait>abs(promax-maxind)*80/nres_oct, maxind=promax; wait = 0,0);
per_frame_34=
per_frame_35=//OUTPUT
per_frame_36=BPM  = m8[3]; // BPM in nres_out discrete steps
per_frame_37=BPMtime += BPM/60*dt*4;
per_frame_38=d=exp(-2*dt);
per_frame_39=quali= quali*d + (1-d)*min (3,max(0,m8[0]*2.2));
per_frame_40=
per_frame_41=speed = speed*d + (1-d)*BPM*.00045;
per_frame_42=trel1 += bass*dt;
per_frame_43=rott  = $pi*0.17* atan(8*sin(time*.031+trel1*0.005)) * (1+0.6*sin(BPMTime*0.02));
per_frame_44=q1 = cos(rott);
per_frame_45=q2 = sin(rott);
per_frame_46=q3 = -q2;
per_frame_47=q4 = q1;
per_frame_48=tmov += speed*dt;
per_frame_49=q6 = tmov;
per_frame_50=q7=speed*500;
per_frame_51=zoom_ = 2.5;
per_frame_52=q8 = zoom_;
per_frame_53=
per_frame_54=q10=BPMtime;
per_frame_55=q11 =  0.007*max(0,sqrt(mid_att+.5))*max(0,quali-0.3)*
per_frame_56=             min(1,max(0,1+sin(BPMTime*$pi/15)));
per_frame_57=q13 = sin((time+BPMTime)/60)/3 + 0.55;
per_frame_58=
per_frame_59=reg32 = aspecty;
per_frame_60=q15=start;
per_frame_61=start *= exp(-8*dt);;
per_frame_62=monitor = quali;
warp_1=`shader_body {
warp_2=`uv = uv_orig;
warp_3=`float2 hor = float2(1,0)*texsize.zw*.7;
warp_4=`float2 ver = float2(0,1)*texsize.zw*.7;;
warp_5=`
warp_6=`uv += (tex2D(sampler_noise_lq,uv*4+rand_frame)-0.5)*0.00;
warp_7=`float dx = tex2D(sampler_main,uv+hor).r - tex2D(sampler_main,uv-hor).r;
warp_8=`float dy = tex2D(sampler_main,uv+ver).r - tex2D(sampler_main,uv-ver).r;
warp_9=`float2 dz = float2 (dx,dy);
warp_10=`
warp_11=`
warp_12=`float3 blur = GetBlur1(frac(uv));
warp_13=`
warp_14=`
warp_15=`double3 crisp = tex2D(sampler_main,uv+dz*.002);
warp_16=`crisp += - length(dz)*.01-0.014*blur;
warp_17=`
warp_18=`ret.r = max (0.3,crisp).r;
warp_19=`ret.b = GetPixel(uv*1.2).b*0.8;
warp_20=`ret.g = GetPixel(uv*2).b*22;
warp_21=`
warp_22=`}
comp_1=`/*
comp_2=`  Martin's milkdrop edit of XorDev's "Starship" on shadertoy.com
comp_3=`  Inspired by the debris from SpaceX's 7th Starship test:
comp_4=`  https://x.com/elonmusk/status/1880040599761596689
comp_5=`  Original twigl version:
comp_6=`  https://x.com/XorDev/status/1880344887033569682
comp_7=`*/
comp_8=`
comp_9=`#define sat saturate
comp_10=`static const float zoom = 1.5*q8*aspect.y, T = q6,speed=q7,  trails = 32, 
comp_11=`                   BPMtime=q10, vb=q11, zz=q13;
comp_12=`
comp_13=`shader_body{
comp_14=`  float2 uv1 = (uv_orig-0.5)*aspect.xy + 0.02*float2(sin(time*0.51),sin(time*0.19));
comp_15=`  float2 p, q = mul (uv1, float2x2(_qa))/zoom;
comp_16=`  float3 S = 0, C = float3(12, 4, 3), col, scr;
comp_17=`
comp_18=`  for (int i = 0; i < trails; i++)
comp_19=`  {
comp_20=`    float j=i/trails; 
comp_21=`    p = q* (1-zz*j)+ 0.053* sin (pow(i+1.,float2(17,23)/51)*T)*float2(2,1.5);
comp_22=`
comp_23=`    col =  (cos(C*cos(i)) +bass_att);
comp_24=`    float2 uvt = p + float2((j-.5)/8*0,T*(1+frac(i*M_PI)));  
comp_25=`    scr = GetPixel(3.25*frac(uvt.yx/aspect.xy+.5));
comp_26=`    float trail = 1 / length (max(p, p / float2(2, scr.r * speed)));
comp_27=`    S += (trail*scr.g*(-p.y))*0.3*(i%2);
comp_28=`    S += trail *   0.0015 * col ;
comp_29=`    S += vb/length(p)* (sat(1-pow((BPMtime)%trails-i,2)) +
comp_30=`                       sat(1-pow((BPMtime*2)%trails-i,2))*2*col);
comp_31=` }
comp_32=` ret = 1-exp(-(sat(q.x)*float3(0,0.6,1)*2  + pow(S,1.8)/trails));
comp_33=`//MilkDrop3 Color Mode:
comp_34=`//ret /= float3(-0.4,1.1,2.8);
comp_35=`}
